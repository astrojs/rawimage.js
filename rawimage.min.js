RawImage=function(){function RawImage(el,width,height){var canvasStyle,overlayStyle,parentStyle;this.el=el;this.width=width;this.height=height;this.reset();this.canvas=document.createElement("canvas");this.canvas.setAttribute("width",width);this.canvas.setAttribute("height",height);this.canvas.setAttribute("class","rawimage-gl");this.overlay=document.createElement("canvas");this.overlay.setAttribute("width",width);this.overlay.setAttribute("height",height);this.overlay.setAttribute("class","rawimage-overlay");this.overlayCtx=this.overlay.getContext("2d");this.el.appendChild(this.canvas);this.el.appendChild(this.overlay);if(!this.setupGLContext())return null;this.hasFragmentShader=false;this.textureAddress=1;this.textureLookupFnAddress=8;this.uniformKeys=["uOffset","uScale","uExtent","uColorIndex","uColorMap","uXTiles","uYTiles"];parentStyle=this.canvas.parentElement.style;parentStyle.width=""+this.canvas.width+"px";parentStyle.height=""+this.canvas.height+"px";parentStyle.overflow="hidden";parentStyle.backgroundColor="#252525";parentStyle.position="relative";canvasStyle=this.canvas.style;canvasStyle.position="absolute";overlayStyle=this.overlay.style;overlayStyle.position="absolute";overlayStyle.pointerEvents="none";this.xOffset=-width/2;this.yOffset=-height/2;this.xOldOffset=this.xOffset;this.yOldOffset=this.yOffset;this.drag=false;this.zoom=2/width;this.minZoom=this.zoom/8;this.maxZoom=20*this.zoom;this.zoomX=this.zoom;this.zoomY=this.zoom;this.crosshair=false}RawImage.prototype.reset=function(){this.programs={};this.uniforms={};this.attributes={};this.textures={};this.buffers={};this.shaders=[];this.nTextures=1;this.textureLookup={};this.textureKeys=["uColorMap"]};RawImage.prototype.destroy=function(){var item;for(item in this.textures){this.gl.deleteTexture(this.textures[item])}this.buffers.forEach(function(item){this.gl.deleteBuffer(item)},this);this.shaders.forEach(function(item){this.gl.deleteShader(item)},this);for(item in this.programs){this.gl.deleteProgram(this.programs[item])}this.gl=undefined;this.reset()};RawImage.shaders={vertex:["attribute vec2 aPosition;","attribute vec2 aTextureCoordinate;","uniform vec2 uOffset;","uniform float uScale;","varying vec2 vTextureCoordinate;","void main() {","vec2 position = aPosition + uOffset;","position = position * uScale;","gl_Position = vec4(position, 0.0, 1.0);","vTextureCoordinate = aTextureCoordinate;","}"].join(""),getPixelFromTile:["vec4 getPixelFromTile(vec2 textureCoordinate) {","vec4 pixel;","float dx = 1.0 / uXTiles;","float dy = 1.0 / uYTiles;","vec2 delta = vec2(dx, dy);","vec2 scaledPosition;"],linear:["precision mediump float;","uniform sampler2D uTexture00;","uniform sampler2D uColorMap;","uniform float uColorIndex;","uniform vec2 uExtent;","uniform float uXTiles;","uniform float uYTiles;","varying vec2 vTextureCoordinate;","void main() {","vec4 pixel_v = getPixelFromTile(vTextureCoordinate);","float min = uExtent[0];","float max = uExtent[1];","float x = (pixel_v.r - min) / (max - min);","gl_FragColor = texture2D( uColorMap, vec2(x, uColorIndex / 70.0) );","}"],logarithm:["precision mediump float;","uniform sampler2D uTexture00;","uniform sampler2D uColorMap;","uniform float uColorIndex;","uniform vec2 uExtent;","uniform float uXTiles;","uniform float uYTiles;","varying vec2 vTextureCoordinate;","float logarithm(float value) {","return log(value / 0.05 + 1.0) / log(1.0 / 0.05 + 1.0);","}","void main() {","vec4 pixel_v = getPixelFromTile(vTextureCoordinate);","float min = uExtent[0];","float max = logarithm(uExtent[1] - min);","float logMin = logarithm(0.0);","float pixel = logarithm(pixel_v[0] - min);","float x = (pixel - logMin) / (max - logMin);","gl_FragColor = texture2D( uColorMap, vec2(x, uColorIndex / 70.0) );","}"],sqrt:["precision mediump float;","uniform sampler2D uTexture0;","uniform sampler2D uColorMap;","uniform float uColorIndex;","uniform vec2 uExtent;","varying vec2 vTextureCoordinate;","void main() {","vec4 pixel_v = texture2D(uTexture0, vTextureCoordinate);","float min = uExtent[0];","float max = uExtent[1] - min;","float x = sqrt( (pixel_v[0] - min) / max);","gl_FragColor = texture2D( uColorMap, vec2(x, uColorIndex / 70.0) );","}"].join(""),arcsinh:["precision mediump float;","uniform sampler2D uTexture0;","uniform sampler2D uColorMap;","uniform float uColorIndex;","uniform vec2 uExtent;","varying vec2 vTextureCoordinate;","float arcsinh(float value) {","return log(value + sqrt(1.0 + value * value));","}","void main() {","vec4 pixel_v = texture2D(uTexture0, vTextureCoordinate);","float min = 0.0;","float max = arcsinh( uExtent[1] - uExtent[0] );","float x = arcsinh( pixel_v[0] - uExtent[0] ) / max;","gl_FragColor = texture2D( uColorMap, vec2(x, uColorIndex / 70.0) );","}"].join(""),power:["precision mediump float;","uniform sampler2D uTexture0;","uniform sampler2D uColorMap;","uniform float uColorIndex;","uniform vec2 uExtent;","varying vec2 vTextureCoordinate;","void main() {","vec4 pixel_v = texture2D(uTexture0, vTextureCoordinate);","float min = uExtent[0];","float max = pow(uExtent[1] - min, 2.0);","float pixel = pow(pixel_v[0] - min, 2.0);","float x = pixel / max;","gl_FragColor = texture2D( uColorMap, vec2(x, uColorIndex / 70.0) );","}"].join(""),color:["precision mediump float;","uniform sampler2D uTexture0;","uniform sampler2D uTexture1;","uniform sampler2D uTexture2;","uniform float uScaleR;","uniform float uScaleG;","uniform float uScaleB;","uniform float uCalibrationR;","uniform float uCalibrationG;","uniform float uCalibrationB;","uniform float uAlpha;","uniform float uQ;","varying vec2 vTextureCoordinate;","float arcsinh(float value) {","return log(value + sqrt(1.0 + value * value));","}","void main() {","vec4 pixel_v_r = texture2D(uTexture0, vTextureCoordinate);","vec4 pixel_v_g = texture2D(uTexture1, vTextureCoordinate);","vec4 pixel_v_b = texture2D(uTexture2, vTextureCoordinate);","float r = (pixel_v_r[0]) * uCalibrationR * uScaleR;","float g = (pixel_v_g[0]) * uCalibrationG * uScaleG;","float b = (pixel_v_b[0]) * uCalibrationB * uScaleB;","float I = r + g + b + 1e-10;","float factor = arcsinh(uAlpha * uQ * I) / (uQ * I);","float R = clamp(r * factor, 0.0, 1.0);","float G = clamp(g * factor, 0.0, 1.0);","float B = clamp(b * factor, 0.0, 1.0);","gl_FragColor = vec4(R, G, B, 1.0);","}"].join("")};RawImage.prototype.loadColorMap=function(){var img,x1,x2,y1,y2,texture,name,program,uColorMap;img=new Image;img.src="data:image/png;base64,"+RawImage.colormaps.base64;x1=y1=0;x2=256,y2=70;this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([x1,y1,x2,y1,x1,y2,x1,y2,x2,y1,x2,y2]),this.gl.STATIC_DRAW);this.gl.activeTexture(this.gl.TEXTURE0);texture=this.gl.createTexture();this.gl.bindTexture(this.gl.TEXTURE_2D,texture);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGB,this.gl.RGB,this.gl.UNSIGNED_BYTE,img);for(name in this.programs){if(name==="color")continue;program=this.programs[name];this.gl.useProgram(program);uColorMap=this.uniforms[name].uColorMap;this.gl.uniform1i(uColorMap,0)}this.gl.useProgram(this.programs[this.transfer])};RawImage.colormaps={base64:"",Accent:70,Blues:69,BrBG:68,BuGn:67,BuPu:66,CMRmap:65,Dark2:64,GnBu:63,Greens:62,Greys:61,OrRd:60,Oranges:59,PRGn:58,Paired:57,Pastel1:56,Pastel2:55,PiYG:54,PuBuGn:53,PuBu:52,PuOr:51,PuRd:50,Purples:49,RdBu:48,RdGy:47,RdPu:46,RdYlBu:45,RdYlGn:44,Reds:43,Set1:42,Set2:41,Set3:40,Spectral:39,YlGnBu:38,YlGn:37,YlOrBr:36,YlOrRd:35,afmhot:34,autumn:33,binary:32,bone:31,brg:30,bwr:29,cool:28,coolwarm:27,copper:26,cubehelix:25,flag:24,gist_earth:23,gist_gray:22,gist_heat:21,gist_ncar:20,gistainbow:19,gist_stern:18,gist_yarg:17,gnuplot2:16,gnuplot:15,gray:14,hot:13,hsv:12,jet:11,ocean:10,pink:9,prism:8,rainbow:7,seismic:6,spectral:5,spring:4,summer:3,terrain:2,winter:1};RawImage.prototype.setupControls=function(callbacks,opts){var voidfn,onmousedown,onmousemove,onmouseout,onmouseover,onmouseup,target=this;voidfn=function(){void 0};callbacks=callbacks===undefined?{}:callbacks;callbacks.onmousedown=callbacks.onmousedown||voidfn;callbacks.onmouseup=callbacks.onmouseup||voidfn;callbacks.onmousemove=callbacks.onmousemove||voidfn;callbacks.onmouseout=callbacks.onmouseout||voidfn;callbacks.onmouseover=callbacks.onmouseover||voidfn;callbacks.onzoom=callbacks.onzoom||voidfn;this.canvas.onmousedown=function(e){target.drag=true;target.xOldOffset=target.xOffset;target.yOldOffset=target.yOffset;target.xMouseDown=e.clientX;target.yMouseDown=e.clientY;callbacks.onmousedown.call(target,opts,e)};this.canvas.onmouseup=function(e){var dx,dy;target.drag=false;if(target.xMouseDown===null)return;dx=e.clientX-target.xMouseDown;dy=e.clientY-target.yMouseDown;target.xOffset=target.xOldOffset+dx/target.width/target.zoom*2;target.yOffset=target.yOldOffset-dy/target.height/target.zoom*2;target.draw();callbacks.onmouseup.call(target,opts,e)};this.canvas.onmousemove=function(e){var dx,dy,xOffset,yOffset,x,y;if(target.crosshair){target.xCurrent=e.layerX;target.yCurrent=e.layerY;target.drawCrosshair()}if(target.drag){dx=e.clientX-target.xMouseDown;dy=e.clientY-target.yMouseDown;target.xOffset=target.xOldOffset+dx/target.width/target.zoom*2;target.yOffset=target.yOldOffset-dy/target.height/target.zoom*2;target.draw()}xOffset=e.clientX-target.offsetLeft;yOffset=e.clientY-target.offsetTop;dx=-1*(target.width/2-xOffset)/target.width/target.zoom*2;dy=(target.height/2-yOffset)/target.height/target.zoom*2;x=-1*(target.xOffset+.5)+dx+1.5<<0;y=-1*(target.yOffset+.5)+dy+1.5<<0;callbacks.onmousemove.call(target,x,y,opts,e)};this.canvas.onmouseout=function(e){target.drag=false;callbacks.onmouseout.call(target,opts,e)};this.canvas.onmouseover=function(e){target.drag=false;callbacks.onmouseover.call(target,opts,e)};onzoom=function(e){var factor,uScale;e.preventDefault();factor=e.shiftKey?1.01:1.1;target.zoom*=(e.wheelDelta||e.deltaY)<0?1/factor:factor;target.zoom=target.zoom>target.maxZoom?target.maxZoom:target.zoom;target.zoom=target.zoom<target.minZoom?target.minZoom:target.zoom;target.draw();callbacks.onzoom()};this.canvas.addEventListener("mousewheel",onzoom,false);this.canvas.addEventListener("wheel",onzoom,false)};RawImage.prototype.setCursor=function(){this.overlay.width=this.overlay.width;this.crosshair=type==="crosshair"?true:false};RawImage.prototype.drawCrosshair=function(){this.overlay.width=this.overlay.width;this.overlayCtx.lineWidth=1;this.overlayCtx.strokeStyle="#0071e5";this.overlayCtx.moveTo(0,this.yCurrent);this.overlayCtx.lineTo(this.width,this.yCurrent);this.overlayCtx.moveTo(this.xCurrent,0);this.overlayCtx.lineTo(this.xCurrent,this.height);this.overlayCtx.stroke()};RawImage.prototype.fragmentShaders=["linear","logarithm","sqrt","arcsinh","power","color"];RawImage.prototype.getExtension=function(){return this.gl.getExtension("OES_texture_float")};RawImage.prototype.loadShader=function(source,type){var gl,shader,compiled,error;gl=this.gl;shader=gl.createShader(type);gl.shaderSource(shader,source);gl.compileShader(shader);compiled=gl.getShaderParameter(shader,gl.COMPILE_STATUS);if(!compiled){gl.deleteShader(shader);error=gl.getShaderInfoLog(shader);throw"Error compiling shader "+shader+": "+error;return null}this.shaders.push(shader);return shader};RawImage.prototype.createProgram=function(vertexShader,fragmentShader){var gl,linked,program;gl=this.gl;program=gl.createProgram();gl.attachShader(program,vertexShader);gl.attachShader(program,fragmentShader);gl.linkProgram(program);linked=gl.getProgramParameter(program,gl.LINK_STATUS);if(!linked){gl.deleteProgram(program);throw"Error in program linking: "+gl.getProgramInfoLog(program);return null}return program};RawImage.prototype.updateUniforms=function(){var uniforms=this.uniforms[this.transfer];this.gl.uniform2f(uniforms.uOffset,this.xOffset,this.yOffset);this.gl.uniform1f(uniforms.uScale,this.zoom)};RawImage.prototype.setupGLContext=function(){var width,height,ext,vertexShader,fragmentShader,key,i,program,buffer;this.gl=this.canvas.getContext("webgl")||this.canvas.getContext("experimental-webgl");if(!this.gl)return false;width=this.width;height=this.height;this.gl.viewport(0,0,width,height);ext=this.getExtension();if(!ext)return false;this.maximumTextureSize=this.gl.getParameter(this.gl.MAX_TEXTURE_SIZE);return true};RawImage.prototype.initGL=function(width,height,callback){var xTiles=this.xTiles=Math.ceil(width/this.maximumTextureSize);var yTiles=this.yTiles=Math.ceil(height/this.maximumTextureSize);vertexShader=this.loadShader(RawImage.shaders.vertex,this.gl.VERTEX_SHADER);if(!vertexShader)return false;["linear","logarithm"].forEach(function(transfer){var fragmentShaderStr=this.createTiledFragmentShader(transfer,xTiles,yTiles);var fragmentShader=this.loadShader(fragmentShaderStr,this.gl.FRAGMENT_SHADER);if(!fragmentShader)return false;var program=this.createProgram(vertexShader,fragmentShader);if(!program)return false;this.programs[transfer]=program;this.gl.useProgram(program);this.uniforms[transfer]={};this.uniformKeys.forEach(function(key){this.uniforms[transfer][key]=this.gl.getUniformLocation(program,key)},this);this.gl.uniform1f(this.uniforms[transfer].uXTiles,xTiles);this.gl.uniform1f(this.uniforms[transfer].uYTiles,yTiles);this.gl.uniform2f(this.uniforms[transfer].uOffset,0,0);this.gl.uniform1f(this.uniforms[transfer].uScale,1);this.gl.uniform1f(this.uniforms[transfer].uColorIndex,RawImage.colormaps.binary-.5);this.attributes[transfer]={};this.attributes[transfer]["aPosition"]=this.gl.getAttribLocation(program,"aPosition");this.attributes[transfer]["aTextureCoordinate"]=this.gl.getAttribLocation(program,"aTextureCoordinate")},this);this.transfer="linear";this.program=this.programs["linear"];this.gl.useProgram(this.program);var positionBuffer=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,positionBuffer);this.gl.enableVertexAttribArray(this.attributes[this.transfer]["aPosition"]);this.gl.vertexAttribPointer(this.attributes[this.transfer]["aPosition"],2,this.gl.FLOAT,false,0,0);this.buffers["position"]=positionBuffer;this.loadColorMap();var x1=y1=0;var x2=1;y2=this.canvas.width/this.canvas.height;x2*=2;y2*=2;x1-=1;y1-=1;x2-=1;y2-=1;this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([x1,y1,x2,y1,x1,y2,x1,y2,x2,y1,x2,y2]),this.gl.STATIC_DRAW);this.gl.enableVertexAttribArray(this.attributes[this.transfer]["aPosition"]);this.gl.vertexAttribPointer(this.attributes[this.transfer]["aPosition"],2,this.gl.FLOAT,false,0,0);x1=y1=0;x2=y2=1;var xp=xTiles*this.maximumTextureSize%width;var yp=yTiles*this.maximumTextureSize%height;xp=xp/(xTiles*this.maximumTextureSize);yp=yp/(yTiles*this.maximumTextureSize);x2=x2-xp;y2=y2-yp;var textureBuffer=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,textureBuffer);this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([x1,y1,x2,y1,x1,y2,x1,y2,x2,y1,x2,y2]),this.gl.STATIC_DRAW);this.gl.enableVertexAttribArray(this.attributes[this.transfer]["aTextureCoordinate"]);this.gl.vertexAttribPointer(this.attributes[this.transfer]["aTextureCoordinate"],2,this.gl.FLOAT,false,0,0);this.buffers["texture"]=textureBuffer};RawImage.prototype.createTiledFragmentShader=function(transfer,xTiles,yTiles){var conditionals={0:"if"};var fn=RawImage.shaders.getPixelFromTile.slice(0);for(var x=0;x<xTiles;x++){var xConditional=conditionals[x]||"else if";fn.push(xConditional+" (textureCoordinate.x < ("+(x+1)+".0 * dx)) {");for(var y=0;y<yTiles;y++){var yConditional=conditionals[y]||"else if";fn.push("	"+yConditional+" (textureCoordinate.y < ("+(y+1)+".0 * dy)) {");fn.push("		scaledPosition = (textureCoordinate - vec2("+x+".0 * dx, "+y+".0 * dy)) / delta;");fn.push("		pixel = texture2D(uTexture"+x+""+y+", scaledPosition);");fn.push("	}")}fn.push("}")}fn.push("return pixel;");fn.push("}");var fragmentShader=RawImage.shaders[transfer].slice(0);fragmentShader.splice.apply(fragmentShader,[this.textureLookupFnAddress,0].concat(fn));var textureSrc=[this.textureAddress,1];for(var j=0;j<yTiles;j++){for(var i=0;i<xTiles;i++){var index=j*xTiles+i;textureSrc.push("uniform sampler2D uTexture"+i+""+j+";");this.textureKeys.push("uTexture"+i+""+j)}}fragmentShader.splice.apply(fragmentShader,textureSrc);return fragmentShader.join("\n")};RawImage.prototype.draw=function(){this.gl.drawArrays(this.gl.TRIANGLES,0,6)};RawImage.prototype.loadImage=function(id,arr,width,height,callback){var index,texture;if(this.textureLookup.hasOwnProperty(id)){index=this.textureLookup[id];this.gl.activeTexture(this.gl.TEXTURE0+index);this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.LUMINANCE,width,height,0,this.gl.LUMINANCE,this.gl.FLOAT,new Float32Array(arr));return}this.initGL(width,height);var xTiles=this.xTiles;var yTiles=this.yTiles;for(var j=0;j<yTiles;j++){for(var i=0;i<xTiles;i++){var x1=i*this.maximumTextureSize;var y1=j*this.maximumTextureSize;var xr=width-x1;var yr=height-y1;var x2=xr>this.maximumTextureSize?this.maximumTextureSize:xr;var y2=yr>this.maximumTextureSize?this.maximumTextureSize:yr;var tile=new Float32Array(x2*y2);var counter=0;for(var jj=y1;jj<y1+y2;jj++){for(var ii=x1;ii<x1+x2;ii++){tile[counter]=arr[jj*width+ii];counter++}}var index=j*xTiles+i+1;this.gl.activeTexture(this.gl["TEXTURE"+index]);texture=this.gl.createTexture();this.gl.bindTexture(this.gl.TEXTURE_2D,texture);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.LUMINANCE,x2,y2,0,this.gl.LUMINANCE,this.gl.FLOAT,tile);var key=this.textureKeys[index];for(name in this.programs){if(name==="color")continue;var program=this.programs[name];this.gl.useProgram(program);this.uniforms[name][key]=this.gl.getUniformLocation(program,key);this.gl.uniform1i(this.uniforms[name][key],index)}}}this.gl.useProgram(this.program);this.gl.drawArrays(this.gl.TRIANGLES,0,6)};RawImage.prototype.setColorMap=function(cmap){var name,program,uColorIndex,cmaps,index;cmaps=Object.keys(RawImage.colormaps);index=cmaps.indexOf("base64");cmaps.splice(index,1);cmap=cmaps.indexOf(cmap)>-1?cmap:"binary";for(name in this.programs){if(name==="color")continue;program=this.programs[name];this.gl.useProgram(program);uColorIndex=this.uniforms[name].uColorIndex;this.gl.uniform1f(uColorIndex,RawImage.colormaps[cmap]-.5)}this.gl.useProgram(this.program);
this.gl.drawArrays(this.gl.TRIANGLES,0,6)};RawImage.prototype.setImage=function(id){var index=this.lookup[id];this.gl.activeTexture(this.gl.TEXTURE0+index);this.gl.uniform1i(this.uniforms[this.program].uTexture0,index);this.currentImage=id};RawImage.prototype.setExtent=function(min,max){var name,program,uExtent;for(name in this.programs){if(name==="color")continue;program=this.programs[name];this.gl.useProgram(program);uExtent=this.uniforms[name].uExtent;this.gl.uniform2f(uExtent,min,max)}this.gl.useProgram(this.program);this.gl.drawArrays(this.gl.TRIANGLES,0,6)};RawImage.prototype.downsample=function(arr,width,height,factor){var i,j,ii,jj,newWidth,newHeight,sum,N;newWidth=parseInt((width+factor-1)/factor);newHeight=parseInt((height+factor-1)/factor);newArr=new arr.constructor(newWidth*newHeight);for(j=0;j<newHeight;j+=1){for(i=0;i<newWidth;i+=1){sum=0,N=0;for(jj=0;jj<factor;jj+=1){if(j*factor+jj>=height)break;for(ii=0;ii<factor;ii+=1){if(i*factor+ii>=width)break;sum+=arr[(j*factor+jj)*width+(i*factor+ii)];N+=1}}newArr[j*newWidth+i]=sum/N}}return{arr:newArr,width:newWidth,height:newHeight}};RawImage.prototype.setTransfer=function(transfer){this.transfer=transfer;this.program=this.programs[transfer];this.gl.useProgram(this.program);this.draw()};RawImage.version="0.5.1-tile";return RawImage}();