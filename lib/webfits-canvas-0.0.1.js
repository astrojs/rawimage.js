// Generated by CoffeeScript 1.4.0
(function() {
  var Api, BaseApi, WebFITS,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (this.astro == null) {
    this.astro = {};
  }

  WebFITS = {};

  WebFITS.version = '0.0.1';

  this.astro.WebFITS = WebFITS;

  BaseApi = (function() {

    BaseApi.prototype.steps = 1000;

    function BaseApi(elem, width, height) {
      this.width = width;
      this.height = height;
      this.wheelHandler = __bind(this.wheelHandler, this);

      this.setupMouseInteraction = __bind(this.setupMouseInteraction, this);

      this.canvas = document.createElement('canvas');
      this.canvas.setAttribute('width', this.width);
      this.canvas.setAttribute('height', this.height);
      elem.appendChild(this.canvas);
    }

    BaseApi.prototype.setGlobalExtent = function(MINIMUM, MAXIMUM) {
      this.MINIMUM = MINIMUM;
      this.MAXIMUM = MAXIMUM;
    };

    BaseApi.prototype.setupMouseInteraction = function() {
      var _this = this;
      this.xOffset = -this.width / 2;
      this.yOffset = -this.height / 2;
      this.xOldOffset = this.xOffset;
      this.yOldOffset = this.yOffset;
      this.drag = false;
      this.zoom = 2 / this.width;
      this.minZoom = this.zoom;
      this.maxZoom = 12 * this.zoom;
      this.zoomX = this.zoom;
      this.zoomY = this.zoom;
      this.canvas.onmousedown = function(e) {
        _this.drag = true;
        _this.xOldOffset = _this.xOffset;
        _this.yOldOffset = _this.yOffset;
        _this.xMouseDown = e.clientX;
        return _this.yMouseDown = e.clientY;
      };
      this.canvas.onmouseup = function(e) {
        var xDelta, yDelta;
        _this.drag = false;
        if (_this.xMouseDown == null) {
          return null;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.width / _this.zoom * 2.0);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.height / _this.zoom * 2.0);
        return _this.draw();
      };
      this.canvas.onmousemove = function(e) {
        var xDelta, yDelta;
        if (!_this.drag) {
          return;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.width / _this.zoom * 2.0);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.height / _this.zoom * 2.0);
        return _this.draw();
      };
      this.canvas.onmouseout = function(e) {
        return _this.drag = false;
      };
      this.canvas.onmouseover = function(e) {
        return _this.drag = false;
      };
      this.canvas.addEventListener('mousewheel', this.wheelHandler, false);
      return this.canvas.addEventListener('DOMMouseScroll', this.wheelHandler, false);
    };

    BaseApi.prototype.wheelHandler = function(e) {
      var factor;
      e.preventDefault();
      factor = e.shiftKey ? 1.01 : 1.1;
      this.zoom *= (e.detail || e.wheelDelta) < 0 ? factor : 1 / factor;
      this.zoom = this.zoom > this.maxZoom ? this.maxZoom : this.zoom;
      return this.zoom = this.zoom < this.minZoom ? this.minZoom : this.zoom;
    };

    return BaseApi;

  })();

  this.astro.WebFITS.BaseApi = BaseApi;

  BaseApi = this.astro.WebFITS.BaseApi;

  Api = (function(_super) {

    __extends(Api, _super);

    Api.prototype.nTextures = 0;

    Api.prototype.textures = {};

    Api.prototype.alpha = 0.03;

    Api.prototype.Q = 1.0;

    Api.prototype.scale = {};

    function Api() {
      this.scaledArcsinh = __bind(this.scaledArcsinh, this);

      this.wheelHandler = __bind(this.wheelHandler, this);

      this.drawColor = __bind(this.drawColor, this);

      this.draw = __bind(this.draw, this);

      this.drawGrayscalePower = __bind(this.drawGrayscalePower, this);

      this.drawGrayscaleArcsinh = __bind(this.drawGrayscaleArcsinh, this);

      this.drawGrayscaleSqrt = __bind(this.drawGrayscaleSqrt, this);

      this.drawGrayscaleLog = __bind(this.drawGrayscaleLog, this);

      this.drawGrayscaleLinear = __bind(this.drawGrayscaleLinear, this);

      this.setBand = __bind(this.setBand, this);

      this.setStretch = __bind(this.setStretch, this);

      this.textureLoaded = __bind(this.textureLoaded, this);

      this.loadTexture = __bind(this.loadTexture, this);

      this.setupMouseInteraction = __bind(this.setupMouseInteraction, this);

      var debounceRate,
        _this = this;
      Api.__super__.constructor.apply(this, arguments);
      this.drawGrayscale = this.drawGrayscaleLinear;
      debounceRate = /Android|iPhone|iPad|iPod/i.test(navigator.userAgent) ? 150 : 50;
      this.drawColorDebounce = _.debounce(this.drawColor, debounceRate);
      this.drawGrayscaleDebounce = _.debounce(function() {
        return _this.drawGrayscale(_this.currentBand);
      }, debounceRate);
      this.texReadyEvt = document.createEvent("HTMLEvents");
      this.texReadyEvt.initEvent("astro:webfits:texready", false, true);
      document.addEventListener("astro:webfits:texready", this.textureLoaded, false);
    }

    Api.prototype.getContext = function() {
      this.canvas.style.webkitTransform = 'scaleY(-1)';
      this.canvas.style.MozTransform = 'scaleY(-1)';
      this.ctx = this.canvas.getContext('2d');
      return this.ctx;
    };

    Api.prototype.setupMouseInteraction = function() {
      var _this = this;
      Api.__super__.setupMouseInteraction.apply(this, arguments);
      this.xOffset = 0;
      this.yOffset = 0;
      this.zoom = 1;
      this.minZoom = this.zoom;
      this.maxZoom = 12 * this.zoom;
      this.canvas.onmouseup = function(e) {
        var xDelta, yDelta;
        _this.drag = false;
        if (_this.xMouseDown == null) {
          return null;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.zoom);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.zoom);
        return _this.draw();
      };
      return this.canvas.onmousemove = function(e) {
        var xDelta, yDelta;
        if (!_this.drag) {
          return;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.zoom);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.zoom);
        return _this.draw();
      };
    };

    Api.prototype.loadTexture = function(band, data) {
      this.textures[band] = new Float32Array(data);
      return document.dispatchEvent(this.texReadyEvt);
    };

    Api.prototype.textureLoaded = function() {
      this.nTextures += 1;
      if (this.nTextures === 5) {
        this.canvas.style.webkitTransform = "scaleX(1) scaleY(-1)";
        this.canvas.style.MozTransform = "scaleX(1) scaleY(-1)";
      }
      return this.nTextures %= 5;
    };

    Api.prototype.setScale = function(band, value) {
      this.scale[band] = value;
      return this.drawColorDebounce();
    };

    Api.prototype.setExtent = function(min, max) {
      this.minimum = (this.MAXIMUM - this.MINIMUM) * min / this.steps + this.MINIMUM;
      this.maximum = (this.MAXIMUM - this.MINIMUM) * max / this.steps + this.MINIMUM;
      return this.drawGrayscaleDebounce();
    };

    Api.prototype.setAlpha = function(value) {
      this.alpha = value;
      return this.drawColorDebounce();
    };

    Api.prototype.setQ = function(value) {
      this.Q = value;
      return this.drawColorDebounce();
    };

    Api.prototype.setStretch = function(value) {
      switch (value) {
        case 'logarithm':
          this.drawGrayscale = this.drawGrayscaleLog;
          break;
        case 'sqrt':
          this.drawGrayscale = this.drawGrayscaleSqrt;
          break;
        case 'arcsinh':
          this.drawGrayscale = this.drawGrayscaleArcsinh;
          break;
        case 'power':
          this.drawGrayscale = this.drawGrayscalePower;
          break;
        default:
          this.drawGrayscale = this.drawGrayscaleLinear;
      }
      return this.drawGrayscale();
    };

    Api.prototype.setBand = function(band) {
      return this.activeBand = band;
    };

    Api.prototype.drawGrayscaleLinear = function() {
      var arr, data, imgData, length, max, min, range, value;
      data = this.textures[this.activeBand];
      imgData = this.ctx.getImageData(0, 0, this.width, this.height);
      arr = imgData.data;
      min = this.minimum;
      max = this.maximum;
      range = max - min;
      length = arr.length;
      while (length -= 4) {
        value = 255 * (data[length / 4] - min) / range;
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      return this.ctx.putImageData(imgData, 0, 0);
    };

    Api.prototype.drawGrayscaleLog = function() {
      var arr, data, imgData, length, max, min, minimum, pixel, range, value;
      data = this.textures[this.activeBand];
      imgData = this.ctx.getImageData(0, 0, this.width, this.height);
      arr = imgData.data;
      minimum = this.minimum;
      min = 0;
      max = this.logarithm(this.maximum - this.minimum);
      range = max - min;
      length = arr.length;
      while (length -= 4) {
        pixel = this.logarithm(data[length / 4] - minimum);
        value = 255 * (pixel - min) / range;
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      return this.ctx.putImageData(imgData, 0, 0);
    };

    Api.prototype.drawGrayscaleSqrt = function() {
      var arr, data, imgData, length, max, minimum, pixel, value;
      data = this.textures[this.activeBand];
      imgData = this.ctx.getImageData(0, 0, this.width, this.height);
      arr = imgData.data;
      minimum = this.minimum;
      max = this.maximum - minimum;
      length = arr.length;
      while (length -= 4) {
        pixel = data[length / 4] - minimum;
        value = 255 * Math.sqrt(pixel / max);
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      return this.ctx.putImageData(imgData, 0, 0);
    };

    Api.prototype.drawGrayscaleArcsinh = function() {
      var arr, data, imgData, length, max, min, pixel, range, value;
      data = this.textures[this.activeBand];
      imgData = this.ctx.getImageData(0, 0, this.width, this.height);
      arr = imgData.data;
      min = this.scaledArcsinh(this.minimum);
      max = this.scaledArcsinh(this.maximum);
      range = max - min;
      length = arr.length;
      while (length -= 4) {
        pixel = this.scaledArcsinh(data[length / 4]);
        value = 255 * (pixel - min) / range;
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      return this.ctx.putImageData(imgData, 0, 0);
    };

    Api.prototype.drawGrayscalePower = function() {
      var arr, data, imgData, length, max, min, pixel, value;
      data = this.textures[this.activeBand];
      imgData = this.ctx.getImageData(0, 0, this.width, this.height);
      arr = imgData.data;
      min = this.minimum;
      max = this.maximum - min;
      length = arr.length;
      while (length -= 4) {
        pixel = data[length / 4] - min;
        value = 255 * Math.pow(pixel / max, 2);
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      return this.ctx.putImageData(imgData, 0, 0);
    };

    Api.prototype.draw = function() {
      var transform;
      transform = ["scaleX(" + this.zoom + ")", "scaleY(" + (-this.zoom) + ")", "translateX(" + this.xOffset + "px)", "translateY(" + this.yOffset + "px)"].join(' ');
      this.canvas.style.webkitTransform = transform;
      return this.canvas.style.MozTransform = transform;
    };

    Api.prototype.drawColor = function() {
      var I, arr, b, canvas, ctx, factor, g, gBand, gScale, iBand, iScale, imgData, index, length, r, rBand, rScale;
      iBand = this.textures['i'];
      rBand = this.textures['r'];
      gBand = this.textures['g'];
      iScale = this.scale['i'];
      rScale = this.scale['r'];
      gScale = this.scale['g'];
      canvas = document.createElement('canvas');
      canvas.width = this.width;
      canvas.height = this.height;
      ctx = canvas.getContext('2d');
      imgData = ctx.getImageData(0, 0, this.width, this.height);
      arr = imgData.data;
      length = arr.length;
      while (length -= 4) {
        index = length / 4;
        r = iBand[index] * iScale;
        g = rBand[index] * rScale;
        b = gBand[index] * gScale;
        I = r + g + b + 1e-10;
        factor = this.arcsinh(this.alpha * this.Q * I) / (this.Q * I);
        arr[length + 0] = 255 * r * factor;
        arr[length + 1] = 255 * g * factor;
        arr[length + 2] = 255 * b * factor;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      ctx.putImageData(imgData, 0, 0);
      return this.ctx.drawImage(canvas, 0, 0);
    };

    Api.prototype.wheelHandler = function(e) {
      Api.__super__.wheelHandler.apply(this, arguments);
      return this.draw();
    };

    Api.prototype.logarithm = function(value) {
      return Math.log(value / 0.05 + 1.0) / Math.log(1.0 / 0.05 + 1.0);
    };

    Api.prototype.arcsinh = function(value) {
      return Math.log(value + Math.sqrt(1 + value * value));
    };

    Api.prototype.scaledArcsinh = function(value) {
      return this.arcsinh(value / -0.033) / this.arcsinh(1.0 / -0.033);
    };

    return Api;

  })(BaseApi);

  this.astro.WebFITS.Api = Api;

}).call(this);
