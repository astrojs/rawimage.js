// Generated by CoffeeScript 1.4.0
(function() {
  var Api, Canvas, WebFITS,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (this.astro == null) {
    this.astro = {};
  }

  WebFITS = {};

  WebFITS.version = '0.0.1';

  this.astro.WebFITS = WebFITS;

  Api = (function() {

    function Api(elem, width, height) {
      var canvas;
      this.width = width;
      this.height = height;
      canvas = document.createElement('canvas');
      canvas.setAttribute('class', 'webfits');
      canvas.setAttribute('width', this.width);
      canvas.setAttribute('height', this.height);
      elem.appendChild(canvas);
      return canvas;
    }

    Api.prototype.setGlobalExtent = function(MINIMUM, MAXIMUM) {
      this.MINIMUM = MINIMUM;
      this.MAXIMUM = MAXIMUM;
    };

    return Api;

  })();

  this.astro.WebFITS.Api = Api;

  Api = this.astro.Webfits.Api;

  Canvas = (function(_super) {

    __extends(Canvas, _super);

    function Canvas() {
      this.drawColor1 = __bind(this.drawColor1, this);

      this.drawColor = __bind(this.drawColor, this);

      this.drawGrayscale = __bind(this.drawGrayscale, this);

      this.loadTexture = __bind(this.loadTexture, this);

      var _this = this;
      Canvas.__super__.constructor.apply(this, arguments);
      this.scale = {};
      this.max = {};
      this.alpha = 0.03;
      this.Q = 1.0;
      this.sky = {
        'g': 0,
        'r': 0,
        'i': 0
      };
      this.colorSat = 1.0;
      this.drawColorDebounce = _.debounce(this.drawColor2, 150);
      this.drawGrayscaleDebounce = _.debounce(function() {
        return _this.drawGrayscale(_this.currentBand);
      }, 150);
    }

    Canvas.prototype.getContext = function(canvas) {
      canvas.style.webkitTransform = 'scaleY(-1)';
      this.ctx = canvas.getContext('2d');
      return this.ctx;
    };

    Canvas.prototype.loadTexture = function(band, data) {
      return this[band] = data;
    };

    Canvas.prototype.draw = function() {
      return console.log('draw');
    };

    Canvas.prototype.setScale = function(band, value) {
      this.scale[band] = value;
      return this.drawColorDebounce();
    };

    Canvas.prototype.setMax = function(band, value) {
      return this.max[band] = value;
    };

    Canvas.prototype.setExtent = function(min, max) {
      this.minimum = (this.MAXIMUM - this.MINIMUM) * min / 1000 + this.MINIMUM;
      this.maximum = (this.MAXIMUM - this.MINIMUM) * max / 1000 + this.MINIMUM;
      return this.drawGrayscaleDebounce();
    };

    Canvas.prototype.setAlpha = function(value) {
      this.alpha = value;
      return this.drawColorDebounce();
    };

    Canvas.prototype.setQ = function(value) {
      this.Q = value;
      return this.drawColorDebounce();
    };

    Canvas.prototype.setBkgdSub = function(band, value) {
      this.sky[band] = value;
      return this.draw();
    };

    Canvas.prototype.setColorSaturation = function(value) {
      this.colorSat = value;
      return this.draw();
    };

    Canvas.prototype.drawGrayscale = function(band) {
      var arr, imgData, length, max, min, range, value;
      this.currentBand = band;
      imgData = this.ctx.getImageData(0, 0, this.width, this.height);
      arr = imgData.data;
      min = this.arcsinh(this.minimum);
      max = this.arcsinh(this.maximum);
      range = max - min;
      length = arr.length;
      while (length -= 4) {
        value = 255 * (this.arcsinh(this[band][length / 4]) - min) / range;
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      return this.ctx.putImageData(imgData, 0, 0);
    };

    Canvas.prototype.drawColor = function() {
      return this.drawColor2();
    };

    Canvas.prototype.drawColor1 = function() {
      var I, b, buffer, buffer8, data, factor, g, imgData, index, length, r;
      imgData = this.ctx.getImageData(0, 0, this.width, this.height);
      length = imgData.data.length;
      buffer = new ArrayBuffer(length);
      buffer8 = new Uint8ClampedArray(buffer);
      data = new Uint32Array(buffer);
      index = this.width * this.height;
      while (index--) {
        r = (this.i[index] - this.sky['i']) * this.scale['i'];
        g = (this.r[index] - this.sky['r']) * this.scale['r'];
        b = (this.g[index] - this.sky['g']) * this.scale['g'];
        I = r + g + b + 1e-10;
        factor = this.arcsinh(this.alpha * this.Q * I) / (this.Q * I);
        r = 255 * this.clamp(r * factor);
        g = 255 * this.clamp(g * factor);
        b = 255 * this.clamp(b * factor);
        data[index] = (255 << 24) | (b << 16) | (g << 8) | r;
      }
      imgData.data.set(buffer8);
      return this.ctx.putImageData(imgData, 0, 0);
    };

    Canvas.prototype.drawColor2 = function() {
      var I, arr, b, factor, g, imgData, index, length, r;
      imgData = this.ctx.getImageData(0, 0, this.width, this.height);
      arr = imgData.data;
      length = arr.length;
      while (length -= 4) {
        index = length / 4;
        r = (this.i[index] - this.sky['i']) * this.scale['i'];
        g = (this.r[index] - this.sky['r']) * this.scale['r'];
        b = (this.g[index] - this.sky['g']) * this.scale['g'];
        I = r + g + b + 1e-10;
        factor = this.arcsinh(this.alpha * this.Q * I) / (this.Q * I);
        arr[length + 0] = 255 * r * factor;
        arr[length + 1] = 255 * g * factor;
        arr[length + 2] = 255 * b * factor;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      return this.ctx.putImageData(imgData, 0, 0);
    };

    Canvas.prototype.arcsinh = function(value) {
      return Math.log(value + Math.sqrt(1 + value * value));
    };

    Canvas.prototype.clamp = function(value) {
      return Math.max(Math.min(1, value), 0);
    };

    return Canvas;

  })(Api);

  this.astro.WebFITS.Canvas = Canvas;

}).call(this);
