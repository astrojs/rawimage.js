// Generated by CoffeeScript 1.4.0
(function() {
  var Api, BaseApi, WebFITS, version,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (this.astro == null) {
    this.astro = {};
  }

  WebFITS = {};

  WebFITS.version = '0.2.2';

  this.astro.WebFITS = WebFITS;

  BaseApi = (function() {

    function BaseApi(el, dimension) {
      var parentStyle;
      this.el = el;
      this.wheelHandler = __bind(this.wheelHandler, this);

      this.width = this.height = dimension;
      this.canvas = document.createElement('canvas');
      this.canvas.setAttribute('width', this.width);
      this.canvas.setAttribute('height', this.height);
      this.el.appendChild(this.canvas);
      this.nImages = 0;
      this.lookup = {};
      if (!this.getContext()) {
        return null;
      }
      parentStyle = this.canvas.parentElement.style;
      parentStyle.width = "" + this.canvas.width + "px";
      parentStyle.height = "" + this.canvas.height + "px";
      parentStyle.overflow = 'hidden';
      parentStyle.backgroundColor = '#151515';
      this.xOffset = -this.width / 2;
      this.yOffset = -this.height / 2;
      this.xOldOffset = this.xOffset;
      this.yOldOffset = this.yOffset;
      this.drag = false;
      this.zoom = 2 / this.width;
      this.minZoom = this.zoom;
      this.maxZoom = 12 * this.zoom;
      this.zoomX = this.zoom;
      this.zoomY = this.zoom;
    }

    BaseApi.prototype.setupControls = function(callbacks, opts) {
      var _onmousedown, _onmousemove, _onmouseout, _onmouseover, _onmouseup,
        _this = this;
      if (callbacks == null) {
        callbacks = null;
      }
      if (opts == null) {
        opts = null;
      }
      _onmousedown = function(e) {
        _this.drag = true;
        _this.xOldOffset = _this.xOffset;
        _this.yOldOffset = _this.yOffset;
        _this.xMouseDown = e.clientX;
        return _this.yMouseDown = e.clientY;
      };
      _onmouseup = function(e) {
        var xDelta, yDelta;
        _this.drag = false;
        if (_this.xMouseDown == null) {
          return null;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.width / _this.zoom * 2.0);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.height / _this.zoom * 2.0);
        return _this.draw();
      };
      _onmousemove = function(e) {
        var xDelta, yDelta;
        if (!_this.drag) {
          return;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.width / _this.zoom * 2.0);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.height / _this.zoom * 2.0);
        return _this.draw();
      };
      _onmouseout = function(e) {
        return _this.drag = false;
      };
      _onmouseover = function(e) {
        return _this.drag = false;
      };
      if ((callbacks != null ? callbacks.onzoom : void 0) != null) {
        this.zoomCallback = callbacks.onzoom;
      }
      if ((callbacks != null ? callbacks.onmousedown : void 0) != null) {
        this.canvas.onmousedown = function(e) {
          _onmousedown(e);
          return callbacks.onmousedown.call(_this, opts, e);
        };
      } else {
        this.canvas.onmousedown = function(e) {
          return _onmousedown(e);
        };
      }
      if ((callbacks != null ? callbacks.onmouseup : void 0) != null) {
        this.canvas.onmouseup = function(e) {
          _onmouseup(e);
          return callbacks.onmouseup.call(_this, opts, e);
        };
      } else {
        this.canvas.onmouseup = function(e) {
          return _onmouseup(e);
        };
      }
      if ((callbacks != null ? callbacks.onmousemove : void 0) != null) {
        this.canvas.onmousemove = function(e) {
          var x, xDelta, y, yDelta;
          _onmousemove(e);
          xDelta = -1 * (_this.width / 2 - e.offsetX) / _this.width / _this.zoom * 2.0;
          yDelta = (_this.height / 2 - e.offsetY) / _this.height / _this.zoom * 2.0;
          x = ((-1 * (_this.xOffset + 0.5)) + xDelta) + 1.5 << 0;
          y = ((-1 * (_this.yOffset + 0.5)) + yDelta) + 1.5 << 0;
          return callbacks.onmousemove.call(_this, x, y, opts, e);
        };
      } else {
        this.canvas.onmousemove = function(e) {
          return _onmousemove(e);
        };
      }
      if ((callbacks != null ? callbacks.onmouseout : void 0) != null) {
        this.canvas.onmouseout = function(e) {
          _onmouseout(e);
          return callbacks.onmouseout.call(_this, opts, e);
        };
      } else {
        this.canvas.onmouseout = function(e) {
          return _onmouseout(e);
        };
      }
      if ((callbacks != null ? callbacks.onmouseover : void 0) != null) {
        this.canvas.onmouseover = function(e) {
          _onmouseover(e);
          return callbacks.onmouseover.call(_this, opts, e);
        };
      } else {
        this.canvas.onmouseover = function(e) {
          return _onmouseover(e);
        };
      }
      this.canvas.addEventListener('mousewheel', this.wheelHandler, false);
      return this.canvas.addEventListener('DOMMouseScroll', this.wheelHandler, false);
    };

    BaseApi.prototype.wheelHandler = function(e) {
      var factor;
      e.preventDefault();
      factor = e.shiftKey ? 1.01 : 1.1;
      this.zoom *= (e.detail || e.wheelDelta) < 0 ? 1 / factor : factor;
      this.zoom = this.zoom > this.maxZoom ? this.maxZoom : this.zoom;
      this.zoom = this.zoom < this.minZoom ? this.minZoom : this.zoom;
      return typeof this.zoomCallback === "function" ? this.zoomCallback() : void 0;
    };

    return BaseApi;

  })();

  this.astro.WebFITS.BaseApi = BaseApi;

  BaseApi = this.astro.WebFITS.BaseApi;

  Api = (function(_super) {

    __extends(Api, _super);

    function Api() {
      this.scaledArcsinh = __bind(this.scaledArcsinh, this);

      this.wheelHandler = __bind(this.wheelHandler, this);
      this._reset();
      Api.__super__.constructor.apply(this, arguments);
    }

    Api.prototype._reset = function() {
      this.images = {};
      this.scales = {};
      return this.calibrations = {};
    };

    Api.prototype._applyTransforms = function() {
      var transforms;
      transforms = ["scaleX(" + this.zoom + ")", "scaleY(" + (-this.zoom) + ")", "translateX(" + this.xOffset + "px)", "translateY(" + this.yOffset + "px)"].join(' ');
      this.canvas.style.transform = transforms;
      this.canvas.style.webkitTransform = transforms;
      return this.canvas.style.MozTransform = transforms;
    };

    Api.prototype.getContext = function() {
      this.canvas.style.transform = 'scaleY(-1)';
      this.canvas.style.webkitTransform = 'scaleY(-1)';
      this.canvas.style.MozTransform = 'scaleY(-1)';
      this.ctx = this.canvas.getContext('2d');
      this.draw = this.drawLinear;
      return this.ctx;
    };

    Api.prototype.setupControls = function() {
      var _this = this;
      Api.__super__.setupControls.apply(this, arguments);
      this.xOffset = 0;
      this.yOffset = 0;
      this.zoom = 1;
      this.minZoom = this.zoom;
      this.maxZoom = 12 * this.zoom;
      this.canvas.onmouseup = function(e) {
        var xDelta, yDelta;
        _this.drag = false;
        if (_this.xMouseDown == null) {
          return null;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.zoom);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.zoom);
        return _this.draw();
      };
      return this.canvas.onmousemove = function(e) {
        var xDelta, yDelta;
        if (!_this.drag) {
          return;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.zoom);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.zoom);
        return _this.draw();
      };
    };

    Api.prototype.loadImage = function(identifier, arr, width, height) {
      var index;
      index = this.nImages;
      this.lookup[identifier] = this.nImages;
      this.images[identifier] = {
        arr: new Float32Array(arr),
        width: width,
        height: height
      };
      if (!this.currentImage) {
        this.setImage(identifier);
      }
      return this.nImages += 1;
    };

    Api.prototype.setImage = function(identifier) {
      return this.currentImage = identifier;
    };

    Api.prototype.setStretch = function(stretch) {
      switch (stretch) {
        case 'logarithm':
          this.draw = this.drawLog;
          break;
        case 'sqrt':
          this.draw = this.drawSqrt;
          break;
        case 'arcsinh':
          this.draw = this.drawAsinh;
          break;
        case 'power':
          this.draw = this.drawPower;
          break;
        default:
          this.draw = this.drawLinear;
      }
      return this.draw();
    };

    Api.prototype.setExtent = function(min, max) {
      this.minimum = min;
      this.maximum = max;
      return this.draw();
    };

    Api.prototype.setScales = function(r, g, b) {
      this.scales.r = r;
      this.scales.g = g;
      this.scales.b = b;
      return this.draw();
    };

    Api.prototype.setCalibrations = function(r, g, b) {
      this.calibrations.r = r;
      this.calibrations.g = g;
      this.calibrations.b = b;
      return this.draw();
    };

    Api.prototype.setAlpha = function(value) {
      this.alpha = value;
      return this.draw();
    };

    Api.prototype.setQ = function(value) {
      this.Q = value;
      return this.draw();
    };

    Api.prototype.drawLinear = function() {
      var arr, data, height, imgData, length, max, min, range, value, width;
      data = this.images[this.currentImage].arr;
      width = this.images[this.currentImage].width;
      height = this.images[this.currentImage].height;
      imgData = this.ctx.getImageData(0, 0, width, height);
      arr = imgData.data;
      min = this.minimum;
      max = this.maximum;
      range = max - min;
      length = arr.length;
      while (length -= 4) {
        value = 255 * (data[length / 4] - min) / range;
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      this.ctx.putImageData(imgData, 0, 0);
      return this._applyTransforms();
    };

    Api.prototype.drawLog = function() {
      var arr, data, height, imgData, length, max, min, minimum, pixel, range, value, width;
      data = this.images[this.currentImage].arr;
      width = this.images[this.currentImage].width;
      height = this.images[this.currentImage].height;
      imgData = this.ctx.getImageData(0, 0, width, height);
      arr = imgData.data;
      minimum = this.minimum;
      min = 0;
      max = this.logarithm(this.maximum - this.minimum);
      range = max - min;
      length = arr.length;
      while (length -= 4) {
        pixel = this.logarithm(data[length / 4] - minimum);
        value = 255 * (pixel - min) / range;
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      this.ctx.putImageData(imgData, 0, 0);
      return this._applyTransforms();
    };

    Api.prototype.drawSqrt = function() {
      var arr, data, height, imgData, length, max, minimum, pixel, value, width;
      data = this.images[this.currentImage].arr;
      width = this.images[this.currentImage].width;
      height = this.images[this.currentImage].height;
      imgData = this.ctx.getImageData(0, 0, width, height);
      arr = imgData.data;
      minimum = this.minimum;
      max = this.maximum - minimum;
      length = arr.length;
      while (length -= 4) {
        pixel = data[length / 4] - minimum;
        value = 255 * Math.sqrt(pixel / max);
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      this.ctx.putImageData(imgData, 0, 0);
      return this._applyTransforms();
    };

    Api.prototype.drawAsinh = function() {
      var arr, data, height, imgData, length, max, min, pixel, range, value, width;
      data = this.images[this.currentImage].arr;
      width = this.images[this.currentImage].width;
      height = this.images[this.currentImage].height;
      imgData = this.ctx.getImageData(0, 0, width, height);
      arr = imgData.data;
      min = this.scaledArcsinh(this.minimum);
      max = this.scaledArcsinh(this.maximum);
      range = max - min;
      length = arr.length;
      while (length -= 4) {
        pixel = this.scaledArcsinh(data[length / 4]);
        value = 255 * (pixel - min) / range;
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      this.ctx.putImageData(imgData, 0, 0);
      return this._applyTransforms();
    };

    Api.prototype.drawPower = function() {
      var arr, data, height, imgData, length, max, min, pixel, value, width;
      data = this.images[this.currentImage].arr;
      width = this.images[this.currentImage].width;
      height = this.images[this.currentImage].height;
      imgData = this.ctx.getImageData(0, 0, width, height);
      arr = imgData.data;
      min = this.minimum;
      max = this.maximum - min;
      length = arr.length;
      while (length -= 4) {
        pixel = data[length / 4] - min;
        value = 255 * Math.pow(pixel / max, 2);
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      this.ctx.putImageData(imgData, 0, 0);
      return this._applyTransforms();
    };

    Api.prototype.drawLupton = function() {
      var I, Q, alpha, arr, b, bFactor, bImage, canvas, ctx, factor, g, gFactor, gImage, height, imgData, index, length, r, rFactor, rImage, width;
      rImage = this.images[this.r].arr;
      gImage = this.images[this.g].arr;
      bImage = this.images[this.b].arr;
      rFactor = this.scales.r * this.calibrations.r;
      gFactor = this.scales.g * this.calibrations.g;
      bFactor = this.scales.b * this.calibrations.b;
      alpha = this.alpha;
      Q = this.Q;
      width = this.images[this.r].width;
      height = this.images[this.r].height;
      canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;
      ctx = canvas.getContext('2d');
      imgData = ctx.getImageData(0, 0, width, height);
      arr = imgData.data;
      length = arr.length;
      while (length -= 4) {
        index = length / 4;
        r = rImage[index] * rFactor;
        g = gImage[index] * gFactor;
        b = bImage[index] * bFactor;
        I = r + g + b + 1e-10;
        factor = this.arcsinh(alpha * Q * I) / (Q * I);
        arr[length + 0] = 255 * r * factor;
        arr[length + 1] = 255 * g * factor;
        arr[length + 2] = 255 * b * factor;
        arr[length + 3] = 255;
      }
      imgData.data = arr;
      ctx.putImageData(imgData, 0, 0);
      this.ctx.drawImage(canvas, 0, 0);
      return this._applyTransforms();
    };

    Api.prototype.drawColor = function(r, g, b) {
      this.r = r;
      this.g = g;
      this.b = b;
      this.draw = this.drawLupton;
      return this.drawLupton();
    };

    Api.prototype.wheelHandler = function(e) {
      Api.__super__.wheelHandler.apply(this, arguments);
      return this.draw();
    };

    Api.prototype.getZoom = function() {
      return this.zoom * 2 / this.width;
    };

    Api.prototype.getXOffset = function() {
      return this.xOffset - this.width / 2;
    };

    Api.prototype.getYOffset = function() {
      return this.yOffset - this.height / 2;
    };

    Api.prototype.teardown = function() {
      this.el.removeChild(this.canvas);
      this.ctx = void 0;
      return this._reset();
    };

    Api.prototype.logarithm = function(value) {
      return Math.log(value / 0.05 + 1.0) / Math.log(1.0 / 0.05 + 1.0);
    };

    Api.prototype.arcsinh = function(value) {
      return Math.log(value + Math.sqrt(1 + value * value));
    };

    Api.prototype.scaledArcsinh = function(value) {
      return this.arcsinh(value / -0.033) / this.arcsinh(1.0 / -0.033);
    };

    return Api;

  })(BaseApi);

  version = this.astro.WebFITS.version;

  this.astro.WebFITS = Api;

  this.astro.WebFITS.version = version;

}).call(this);
