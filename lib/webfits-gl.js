// Generated by CoffeeScript 1.4.0
(function() {
  var Api, BaseApi, ColorMaps, Shaders, WebFITS, version,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (this.astro == null) {
    this.astro = {};
  }

  WebFITS = {};

  WebFITS.version = '0.2.9';

  this.astro.WebFITS = WebFITS;

  BaseApi = (function() {

    function BaseApi(el, dimension) {
      var canvasStyle, overlayStyle, parentStyle;
      this.el = el;
      this.wheelHandler = __bind(this.wheelHandler, this);

      this._reset();
      this.width = this.height = dimension;
      this.canvas = document.createElement('canvas');
      this.canvas.setAttribute('width', this.width);
      this.canvas.setAttribute('height', this.height);
      this.canvas.setAttribute('class', 'visualization');
      this.overlay = document.createElement('canvas');
      this.overlay.setAttribute('width', this.width);
      this.overlay.setAttribute('height', this.height);
      this.overlay.setAttribute('class', 'overlay');
      this.overlayCtx = this.overlay.getContext('2d');
      this.el.appendChild(this.canvas);
      this.el.appendChild(this.overlay);
      this.nImages = 1;
      this.lookup = {};
      if (!this.getContext()) {
        return null;
      }
      this.offsetLeft = this.canvas.offsetLeft;
      this.offsetTop = this.canvas.offsetTop;
      parentStyle = this.canvas.parentElement.style;
      parentStyle.width = "" + this.canvas.width + "px";
      parentStyle.height = "" + this.canvas.height + "px";
      parentStyle.overflow = 'hidden';
      parentStyle.backgroundColor = '#252525';
      parentStyle.position = 'relative';
      canvasStyle = this.canvas.style;
      overlayStyle = this.overlay.style;
      canvasStyle.position = 'absolute';
      overlayStyle.position = 'absolute';
      overlayStyle.pointerEvents = 'none';
      this.xOffset = -this.width / 2;
      this.yOffset = -this.height / 2;
      this.xOldOffset = this.xOffset;
      this.yOldOffset = this.yOffset;
      this.drag = false;
      this.zoom = 2 / this.width;
      this.minZoom = this.zoom / 8;
      this.maxZoom = 20 * this.zoom;
      this.zoomX = this.zoom;
      this.zoomY = this.zoom;
      this.crosshair = false;
    }

    BaseApi.prototype.setupControls = function(callbacks, opts) {
      var _onmousedown, _onmousemove, _onmouseout, _onmouseover, _onmouseup,
        _this = this;
      if (callbacks == null) {
        callbacks = null;
      }
      if (opts == null) {
        opts = null;
      }
      _onmousedown = function(e) {
        _this.drag = true;
        _this.xOldOffset = _this.xOffset;
        _this.yOldOffset = _this.yOffset;
        _this.xMouseDown = e.clientX;
        return _this.yMouseDown = e.clientY;
      };
      _onmouseup = function(e) {
        var xDelta, yDelta;
        _this.drag = false;
        if (_this.xMouseDown == null) {
          return null;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.width / _this.zoom * 2.0);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.height / _this.zoom * 2.0);
        return _this.draw();
      };
      _onmousemove = function(e) {
        var xDelta, yDelta;
        if (_this.crosshair) {
          _this.overlay.width = _this.overlay.width;
          _this.overlayCtx.lineWidth = 1;
          _this.overlayCtx.strokeStyle = '#0071e5';
          _this.overlayCtx.moveTo(0, e.layerY);
          _this.overlayCtx.lineTo(_this.width, e.layerY);
          _this.overlayCtx.moveTo(e.layerX, 0);
          _this.overlayCtx.lineTo(e.layerX, _this.height);
          _this.overlayCtx.stroke();
        }
        if (!_this.drag) {
          return;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.width / _this.zoom * 2.0);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.height / _this.zoom * 2.0);
        return _this.draw();
      };
      _onmouseout = function(e) {
        return _this.drag = false;
      };
      _onmouseover = function(e) {
        return _this.drag = false;
      };
      if ((callbacks != null ? callbacks.onzoom : void 0) != null) {
        this.zoomCallback = callbacks.onzoom;
      }
      if ((callbacks != null ? callbacks.onmousedown : void 0) != null) {
        this.canvas.onmousedown = function(e) {
          _onmousedown(e);
          return callbacks.onmousedown.call(_this, opts, e);
        };
      } else {
        this.canvas.onmousedown = function(e) {
          return _onmousedown(e);
        };
      }
      if ((callbacks != null ? callbacks.onmouseup : void 0) != null) {
        this.canvas.onmouseup = function(e) {
          _onmouseup(e);
          return callbacks.onmouseup.call(_this, opts, e);
        };
      } else {
        this.canvas.onmouseup = function(e) {
          return _onmouseup(e);
        };
      }
      if ((callbacks != null ? callbacks.onmousemove : void 0) != null) {
        this.canvas.onmousemove = function(e) {
          var offsetX, offsetY, x, xDelta, y, yDelta;
          _onmousemove(e);
          offsetX = e.clientX - _this.offsetLeft;
          offsetY = e.clientY - _this.offsetTop;
          xDelta = -1 * (_this.width / 2 - offsetX) / _this.width / _this.zoom * 2.0;
          yDelta = (_this.height / 2 - offsetY) / _this.height / _this.zoom * 2.0;
          x = ((-1 * (_this.xOffset + 0.5)) + xDelta) + 1.5 << 0;
          y = ((-1 * (_this.yOffset + 0.5)) + yDelta) + 1.5 << 0;
          return callbacks.onmousemove.call(_this, x, y, opts, e);
        };
      } else {
        this.canvas.onmousemove = function(e) {
          return _onmousemove(e);
        };
      }
      if ((callbacks != null ? callbacks.onmouseout : void 0) != null) {
        this.canvas.onmouseout = function(e) {
          _onmouseout(e);
          return callbacks.onmouseout.call(_this, opts, e);
        };
      } else {
        this.canvas.onmouseout = function(e) {
          return _onmouseout(e);
        };
      }
      if ((callbacks != null ? callbacks.onmouseover : void 0) != null) {
        this.canvas.onmouseover = function(e) {
          _onmouseover(e);
          return callbacks.onmouseover.call(_this, opts, e);
        };
      } else {
        this.canvas.onmouseover = function(e) {
          return _onmouseover(e);
        };
      }
      this.canvas.addEventListener('mousewheel', this.wheelHandler, false);
      return this.canvas.addEventListener('wheel', this.wheelHandler, false);
    };

    BaseApi.prototype.wheelHandler = function(e) {
      var factor;
      e.preventDefault();
      factor = e.shiftKey ? 1.01 : 1.1;
      this.zoom *= (e.wheelDelta || e.deltaY) < 0 ? 1 / factor : factor;
      this.zoom = this.zoom > this.maxZoom ? this.maxZoom : this.zoom;
      this.zoom = this.zoom < this.minZoom ? this.minZoom : this.zoom;
      return typeof this.zoomCallback === "function" ? this.zoomCallback() : void 0;
    };

    BaseApi.prototype.setCursor = function(type) {
      this.overlay.width = this.overlay.width;
      if (type === 'crosshair') {
        return this.crosshair = true;
      } else {
        return this.crosshair = false;
      }
    };

    return BaseApi;

  })();

  this.astro.WebFITS.BaseApi = BaseApi;

  Shaders = {
    vertex: ["attribute vec2 a_position;", "attribute vec2 a_textureCoord;", "uniform vec2 u_offset;", "uniform float u_scale;", "varying vec2 v_textureCoord;", "void main() {", "vec2 position = a_position + u_offset;", "position = position * u_scale;", "gl_Position = vec4(position, 0.0, 1.0);", "v_textureCoord = a_textureCoord;", "}"].join("\n"),
    linear: ["precision mediump float;", "uniform sampler2D u_tex;", "uniform sampler2D uColorMap;", "uniform vec2 u_extent;", "uniform vec3 u_color;", "varying vec2 v_textureCoord;", "void main() {", "vec4 pixel_v = texture2D(u_tex, v_textureCoord);", "float min = u_extent[0];", "float max = u_extent[1];", "float x = (pixel_v.r - min) / (max - min);", "gl_FragColor = texture2D( uColorMap, vec2(x, 0) );", "}"].join("\n"),
    logarithm: ["precision mediump float;", "uniform sampler2D u_tex;", "uniform vec2 u_extent;", "uniform vec3 u_color;", "varying vec2 v_textureCoord;", "float logarithm(float value) {", "return log(value / 0.05 + 1.0) / log(1.0 / 0.05 + 1.0);", "}", "void main() {", "vec4 pixel_v = texture2D(u_tex, v_textureCoord);", "float min = u_extent[0];", "float max = logarithm(u_extent[1] - min);", "float logMin = logarithm(0.0);", "float pixel = pixel_v[0] - min;", "pixel = logarithm(pixel);", "pixel = (pixel - logMin) / (max - logMin);", "gl_FragColor = vec4( vec3(pixel, pixel, pixel) * u_color, 1.0);", "}"].join("\n"),
    sqrt: ["precision mediump float;", "uniform sampler2D u_tex;", "uniform vec2 u_extent;", "uniform vec3 u_color;", "varying vec2 v_textureCoord;", "void main() {", "vec4 pixel_v = texture2D(u_tex, v_textureCoord);", "float min = u_extent[0];", "float max = u_extent[1] - min;", "float pixel = pixel_v[0] - min;", "pixel = sqrt(pixel_v[0] / max);", "gl_FragColor = vec4( vec3(pixel, pixel, pixel) * u_color, 1.0);", "}"].join("\n"),
    arcsinh: ["precision mediump float;", "uniform sampler2D u_tex;", "uniform vec2 u_extent;", "uniform vec3 u_color;", "varying vec2 v_textureCoord;", "float arcsinh(float value) {", "return log(value + sqrt(1.0 + value * value));", "}", "void main() {", "vec4 pixel_v = texture2D(u_tex, v_textureCoord);", "float min = 0.0;", "float max = arcsinh( u_extent[1] - u_extent[0] );", "float value = arcsinh( pixel_v[0] - u_extent[0] );", "float pixel = value / max;", "gl_FragColor = vec4( vec3(pixel, pixel, pixel) * u_color, 1.0);", "}"].join("\n"),
    power: ["precision mediump float;", "uniform sampler2D u_tex;", "uniform vec2 u_extent;", "uniform vec3 u_color;", "varying vec2 v_textureCoord;", "void main() {", "vec4 pixel_v = texture2D(u_tex, v_textureCoord);", "float min = u_extent[0];", "float max = u_extent[1] - min;", "float pixel = pixel_v[0] - min;", "pixel = pow(pixel / max, 2.0);", "gl_FragColor = vec4( vec3(pixel, pixel, pixel) * u_color, 1.0);", "}"].join("\n"),
    color: ["precision mediump float;", "uniform sampler2D u_tex0;", "uniform sampler2D u_tex1;", "uniform sampler2D u_tex2;", "uniform float u_r_scale;", "uniform float u_g_scale;", "uniform float u_b_scale;", "uniform float u_r_calibration;", "uniform float u_g_calibration;", "uniform float u_b_calibration;", "uniform float u_alpha;", "uniform float u_Q;", "varying vec2 v_textureCoord;", "float arcsinh(float value) {", "return log(value + sqrt(1.0 + value * value));", "}", "void main() {", "vec4 pixel_v_r = texture2D(u_tex0, v_textureCoord);", "vec4 pixel_v_g = texture2D(u_tex1, v_textureCoord);", "vec4 pixel_v_b = texture2D(u_tex2, v_textureCoord);", "float r = (pixel_v_r[0]) * u_r_calibration * u_r_scale;", "float g = (pixel_v_g[0]) * u_g_calibration * u_g_scale;", "float b = (pixel_v_b[0]) * u_b_calibration * u_b_scale;", "float I = r + g + b + 1e-10;", "float factor = arcsinh(u_alpha * u_Q * I) / (u_Q * I);", "float R = clamp(r * factor, 0.0, 1.0);", "float G = clamp(g * factor, 0.0, 1.0);", "float B = clamp(b * factor, 0.0, 1.0);", "gl_FragColor = vec4(R, G, B, 1.0);", "}"].join("\n")
  };

  this.astro.WebFITS.Shaders = Shaders;

  ColorMaps = {
    binary: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 101, 102, 102, 102, 103, 103, 103, 104, 104, 104, 105, 105, 105, 106, 106, 106, 107, 107, 107, 108, 108, 108, 109, 109, 109, 110, 110, 110, 111, 111, 111, 112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 116, 116, 116, 117, 117, 117, 118, 118, 118, 119, 119, 119, 120, 120, 120, 121, 121, 121, 122, 122, 122, 123, 123, 123, 124, 124, 124, 125, 125, 125, 126, 126, 126, 127, 127, 127, 128, 128, 128, 129, 129, 129, 130, 130, 130, 131, 131, 131, 132, 132, 132, 133, 133, 133, 134, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140, 140, 141, 141, 141, 142, 142, 142, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152, 152, 152, 153, 153, 153, 154, 154, 154, 155, 155, 155, 156, 156, 156, 157, 157, 157, 158, 158, 158, 159, 159, 159, 160, 160, 160, 161, 161, 161, 162, 162, 162, 163, 163, 163, 164, 164, 164, 165, 165, 165, 166, 166, 166, 167, 167, 167, 168, 168, 168, 169, 169, 169, 170, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174, 174, 175, 175, 175, 176, 176, 176, 177, 177, 177, 178, 178, 178, 179, 179, 179, 180, 180, 180, 181, 181, 181, 182, 182, 182, 183, 183, 183, 184, 184, 184, 185, 185, 185, 186, 186, 186, 187, 187, 187, 188, 188, 188, 189, 189, 189, 190, 190, 190, 191, 191, 191, 192, 192, 192, 193, 193, 193, 194, 194, 194, 195, 195, 195, 196, 196, 196, 197, 197, 197, 198, 198, 198, 199, 199, 199, 200, 200, 200, 201, 201, 201, 202, 202, 202, 203, 203, 203, 204, 204, 204, 205, 205, 205, 206, 206, 206, 207, 207, 207, 208, 208, 208, 209, 209, 209, 210, 210, 210, 211, 211, 211, 212, 212, 212, 213, 213, 213, 214, 214, 214, 215, 215, 215, 216, 216, 216, 217, 217, 217, 218, 218, 218, 219, 219, 219, 220, 220, 220, 221, 221, 221, 222, 222, 222, 223, 223, 223, 224, 224, 224, 225, 225, 225, 226, 226, 226, 227, 227, 227, 228, 228, 228, 229, 229, 229, 230, 230, 230, 231, 231, 231, 232, 232, 232, 233, 233, 233, 234, 234, 234, 235, 235, 235, 236, 236, 236, 237, 237, 237, 238, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 246, 247, 247, 247, 248, 248, 248, 249, 249, 249, 250, 250, 250, 251, 251, 251, 252, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255],
    coolwarm: [59, 76, 192, 60, 78, 194, 61, 80, 195, 62, 81, 197, 63, 83, 198, 64, 85, 200, 66, 87, 201, 67, 88, 203, 68, 90, 204, 69, 92, 206, 70, 94, 207, 72, 95, 209, 73, 97, 210, 74, 99, 211, 75, 100, 213, 76, 102, 214, 78, 104, 216, 79, 105, 217, 80, 107, 218, 81, 109, 219, 83, 110, 221, 84, 112, 222, 85, 114, 223, 86, 115, 224, 88, 117, 225, 89, 119, 227, 90, 120, 228, 91, 122, 229, 93, 124, 230, 94, 125, 231, 95, 127, 232, 97, 128, 233, 98, 130, 234, 99, 132, 235, 100, 133, 236, 102, 135, 237, 103, 136, 238, 104, 138, 239, 106, 139, 239, 107, 141, 240, 108, 143, 241, 110, 144, 242, 111, 146, 243, 112, 147, 243, 114, 149, 244, 115, 150, 245, 117, 151, 246, 118, 153, 246, 119, 154, 247, 121, 156, 248, 122, 157, 248, 123, 159, 249, 125, 160, 249, 126, 161, 250, 128, 163, 250, 129, 164, 251, 130, 166, 251, 132, 167, 252, 133, 168, 252, 134, 169, 252, 136, 171, 253, 137, 172, 253, 139, 173, 253, 140, 175, 254, 141, 176, 254, 143, 177, 254, 144, 178, 254, 146, 180, 254, 147, 181, 254, 148, 182, 255, 150, 183, 255, 151, 184, 255, 152, 185, 255, 154, 187, 255, 155, 188, 255, 157, 189, 255, 158, 190, 255, 159, 191, 255, 161, 192, 255, 162, 193, 255, 163, 194, 254, 165, 195, 254, 166, 196, 254, 167, 197, 254, 169, 198, 253, 170, 199, 253, 171, 200, 253, 173, 201, 253, 174, 201, 252, 175, 202, 252, 177, 203, 252, 178, 204, 251, 179, 205, 251, 181, 205, 250, 182, 206, 250, 183, 207, 249, 185, 208, 249, 186, 208, 248, 187, 209, 248, 188, 210, 247, 190, 210, 246, 191, 211, 246, 192, 212, 245, 193, 212, 244, 195, 213, 244, 196, 213, 243, 197, 214, 242, 198, 214, 241, 199, 215, 240, 201, 215, 240, 202, 216, 239, 203, 216, 238, 204, 217, 237, 205, 217, 236, 206, 218, 235, 207, 218, 234, 209, 218, 233, 210, 219, 232, 211, 219, 231, 212, 219, 230, 213, 219, 229, 214, 220, 228, 215, 220, 227, 216, 220, 226, 217, 220, 225, 218, 220, 224, 219, 220, 222, 220, 221, 221, 221, 220, 220, 222, 220, 219, 223, 219, 217, 224, 219, 216, 225, 218, 214, 226, 218, 213, 227, 217, 211, 228, 217, 210, 229, 216, 209, 230, 215, 207, 231, 215, 206, 232, 214, 204, 233, 213, 203, 234, 213, 201, 234, 212, 200, 235, 211, 198, 236, 211, 197, 237, 210, 195, 237, 209, 194, 238, 208, 192, 239, 207, 191, 239, 206, 189, 240, 205, 187, 241, 205, 186, 241, 204, 184, 242, 203, 183, 242, 202, 181, 242, 201, 180, 243, 200, 178, 243, 199, 177, 244, 198, 175, 244, 197, 173, 245, 196, 172, 245, 194, 170, 245, 193, 169, 245, 192, 167, 246, 191, 166, 246, 190, 164, 246, 189, 162, 247, 188, 161, 247, 186, 159, 247, 185, 158, 247, 184, 156, 247, 183, 155, 247, 181, 153, 247, 180, 151, 247, 179, 150, 247, 177, 148, 247, 176, 147, 247, 175, 145, 247, 173, 144, 247, 172, 142, 247, 170, 140, 247, 169, 139, 247, 168, 137, 247, 166, 136, 246, 165, 134, 246, 163, 133, 246, 162, 131, 245, 160, 129, 245, 159, 128, 245, 157, 126, 245, 156, 125, 244, 154, 123, 244, 152, 122, 243, 151, 120, 243, 149, 119, 243, 148, 117, 242, 146, 116, 242, 144, 114, 241, 143, 113, 241, 141, 111, 240, 139, 110, 240, 138, 108, 239, 136, 107, 238, 134, 105, 238, 132, 104, 237, 131, 102, 236, 129, 101, 236, 127, 99, 235, 125, 98, 234, 123, 96, 233, 122, 95, 233, 120, 93, 232, 118, 92, 231, 116, 91, 230, 114, 89, 229, 112, 88, 228, 110, 86, 227, 108, 85, 227, 107, 84, 226, 105, 82, 225, 103, 81, 224, 101, 79, 223, 99, 78, 222, 97, 77, 221, 95, 75, 220, 93, 74, 218, 90, 73, 217, 88, 71, 216, 86, 70, 215, 84, 69, 214, 82, 68, 213, 80, 66, 212, 78, 65, 210, 75, 64, 209, 73, 63, 208, 71, 61, 207, 69, 60, 205, 66, 59, 204, 64, 58, 203, 62, 56, 202, 59, 55, 200, 56, 54, 199, 54, 53, 197, 51, 52, 196, 48, 50, 195, 46, 49, 193, 43, 48, 192, 40, 47, 190, 36, 46, 189, 31, 45, 187, 27, 44, 186, 22, 43, 184, 18, 42, 183, 13, 40, 181, 9, 39]
  };

  this.astro.WebFITS.ColorMaps = ColorMaps;

  BaseApi = this.astro.WebFITS.BaseApi;

  Shaders = this.astro.WebFITS.Shaders;

  ColorMaps = this.astro.WebFITS.ColorMaps;

  Api = (function(_super) {

    __extends(Api, _super);

    function Api() {
      return Api.__super__.constructor.apply(this, arguments);
    }

    Api.prototype.fShaders = ['linear', 'logarithm', 'sqrt', 'arcsinh', 'power', 'color'];

    Api.prototype._reset = function() {
      this.programs = {};
      this.textures = {};
      this.buffers = [];
      return this.shaders = [];
    };

    Api.prototype._getExtension = function() {
      return this.ctx.getExtension('OES_texture_float');
    };

    Api.prototype._loadShader = function(source, type) {
      var compiled, ctx, lastError, shader;
      ctx = this.ctx;
      shader = ctx.createShader(type);
      ctx.shaderSource(shader, source);
      ctx.compileShader(shader);
      compiled = ctx.getShaderParameter(shader, ctx.COMPILE_STATUS);
      if (!compiled) {
        lastError = ctx.getShaderInfoLog(shader);
        throw "Error compiling shader " + shader + ": " + lastError;
        ctx.deleteShader(shader);
        return null;
      }
      this.shaders.push(shader);
      return shader;
    };

    Api.prototype._createProgram = function(vshader, fshader) {
      var ctx, linked, program;
      ctx = this.ctx;
      program = ctx.createProgram();
      ctx.attachShader(program, vshader);
      ctx.attachShader(program, fshader);
      ctx.linkProgram(program);
      linked = ctx.getProgramParameter(program, ctx.LINK_STATUS);
      if (!linked) {
        throw "Error in program linking: " + (ctx.getProgramInfoLog(program));
        ctx.deleteProgram(program);
        return null;
      }
      return program;
    };

    Api.prototype._setRectangle = function(ctx, width, height) {
      var x1, x2, y1, y2, _ref, _ref1;
      _ref = [0, 0 + width], x1 = _ref[0], x2 = _ref[1];
      _ref1 = [0, 0 + height], y1 = _ref1[0], y2 = _ref1[1];
      return ctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]), ctx.STATIC_DRAW);
    };

    Api.prototype._updateUniforms = function(program) {
      var offsetLocation, scaleLocation;
      offsetLocation = this.ctx.getUniformLocation(program, 'u_offset');
      scaleLocation = this.ctx.getUniformLocation(program, 'u_scale');
      this.ctx.uniform2f(offsetLocation, this.xOffset, this.yOffset);
      return this.ctx.uniform1f(scaleLocation, this.zoom);
    };

    Api.prototype.getContext = function() {
      var buffer, colorLocation, ctx, ext, fragShader, height, index, key, name, offsetLocation, positionLocation, program, scaleLocation, texCoordBuffer, texCoordLocation, vertexShader, width, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      _ref = ['webgl', 'experimental-webgl'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        try {
          ctx = this.canvas.getContext(name);
          width = this.canvas.width;
          height = this.canvas.height;
          ctx.viewport(0, 0, width, height);
        } catch (e) {

        }
        if (ctx) {
          break;
        }
      }
      if (!ctx) {
        return null;
      }
      this.ctx = ctx;
      ext = this._getExtension();
      if (!ext) {
        return null;
      }
      vertexShader = this._loadShader(Shaders.vertex, ctx.VERTEX_SHADER);
      if (!vertexShader) {
        return null;
      }
      _ref1 = this.fShaders;
      for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
        key = _ref1[index];
        fragShader = this._loadShader(Shaders[key], ctx.FRAGMENT_SHADER);
        if (!fragShader) {
          return null;
        }
        this.programs[key] = this._createProgram(vertexShader, fragShader);
        if (!this.programs[key]) {
          return null;
        }
      }
      _ref2 = this.programs;
      for (key in _ref2) {
        program = _ref2[key];
        ctx.useProgram(program);
        positionLocation = ctx.getAttribLocation(program, 'a_position');
        texCoordLocation = ctx.getAttribLocation(program, 'a_textureCoord');
        offsetLocation = ctx.getUniformLocation(program, 'u_offset');
        scaleLocation = ctx.getUniformLocation(program, 'u_scale');
        colorLocation = ctx.getUniformLocation(program, 'u_color');
        ctx.uniform2f(offsetLocation, -width / 2, -height / 2);
        ctx.uniform1f(scaleLocation, 2 / width);
        ctx.uniform3f(colorLocation, 1.0, 1.0, 1.0);
      }
      this.currentProgram = this.programs.linear;
      texCoordBuffer = ctx.createBuffer();
      ctx.bindBuffer(ctx.ARRAY_BUFFER, texCoordBuffer);
      ctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), ctx.STATIC_DRAW);
      ctx.enableVertexAttribArray(texCoordLocation);
      ctx.vertexAttribPointer(texCoordLocation, 2, ctx.FLOAT, false, 0, 0);
      buffer = ctx.createBuffer();
      ctx.bindBuffer(ctx.ARRAY_BUFFER, buffer);
      ctx.enableVertexAttribArray(positionLocation);
      ctx.vertexAttribPointer(positionLocation, 2, ctx.FLOAT, false, 0, 0);
      this.buffers.push(texCoordBuffer);
      this.buffers.push(buffer);
      this.setupColorMap();
      return ctx;
    };

    Api.prototype.setupColorMap = function() {
      var cmap, ctx, location, program, stretch, texture, _i, _len, _ref, _results;
      ctx = this.ctx;
      ctx.activeTexture(ctx.TEXTURE0);
      texture = ctx.createTexture();
      ctx.bindTexture(ctx.TEXTURE_2D, texture);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_S, ctx.CLAMP_TO_EDGE);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_T, ctx.CLAMP_TO_EDGE);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx.NEAREST);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx.NEAREST);
      cmap = new Uint8Array(ColorMaps['binary']);
      ctx.texImage2D(ctx.TEXTURE_2D, 0, ctx.RGB, 255, 1, 0, ctx.RGB, ctx.UNSIGNED_BYTE, cmap);
      _ref = ['linear', 'logarithm', 'sqrt', 'arcsinh', 'power'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        stretch = _ref[_i];
        program = this.programs[stretch];
        ctx.useProgram(program);
        location = ctx.getUniformLocation(program, 'uColorMap');
        _results.push(ctx.uniform1i(location, 0));
      }
      return _results;
    };

    Api.prototype.loadImage = function(identifier, arr, width, height) {
      var ctx, index, texture;
      ctx = this.ctx;
      this._setRectangle(ctx, width, height);
      index = this.nImages;
      this.lookup[identifier] = this.nImages;
      ctx.activeTexture(ctx.TEXTURE0 + this.nImages);
      texture = ctx.createTexture();
      ctx.bindTexture(ctx.TEXTURE_2D, texture);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_S, ctx.CLAMP_TO_EDGE);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_T, ctx.CLAMP_TO_EDGE);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx.NEAREST);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx.NEAREST);
      ctx.texImage2D(ctx.TEXTURE_2D, 0, ctx.LUMINANCE, width, height, 0, ctx.LUMINANCE, ctx.FLOAT, new Float32Array(arr));
      if (this.currentImage == null) {
        this.currentImage = identifier;
      }
      this.textures[identifier] = texture;
      return this.nImages += 1;
    };

    Api.prototype.setImage = function(identifier) {
      var index, location;
      index = this.lookup[identifier];
      this.ctx.activeTexture(this.ctx.TEXTURE0 + index);
      location = this.ctx.getUniformLocation(this.currentProgram, "u_tex");
      this.ctx.uniform1i(location, index);
      return this.currentImage = identifier;
    };

    Api.prototype.setStretch = function(stretch) {
      this.currentProgram = this.programs[stretch];
      this.ctx.useProgram(this.currentProgram);
      this.setImage(this.currentImage);
      return this.draw();
    };

    Api.prototype.setExtent = function(min, max) {
      var ctx, location, program, stretch, _i, _len, _ref;
      ctx = this.ctx;
      _ref = ['linear', 'logarithm', 'sqrt', 'arcsinh', 'power'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        stretch = _ref[_i];
        program = this.programs[stretch];
        ctx.useProgram(program);
        location = ctx.getUniformLocation(program, 'u_extent');
        ctx.uniform2f(location, min, max);
      }
      ctx.useProgram(this.currentProgram);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.setColorMap = function(r, g, b) {
      var ctx, location, program, stretch, _i, _len, _ref;
      ctx = this.ctx;
      _ref = ['linear', 'logarithm', 'sqrt', 'arcsinh', 'power'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        stretch = _ref[_i];
        program = this.programs[stretch];
        ctx.useProgram(program);
        location = ctx.getUniformLocation(program, 'u_color');
        ctx.uniform3f(location, r, g, b);
      }
      ctx.useProgram(this.currentProgram);
      return this.draw();
    };

    Api.prototype.setScales = function(r, g, b) {
      var ctx, location, program;
      ctx = this.ctx;
      program = this.programs.color;
      ctx.useProgram(program);
      location = ctx.getUniformLocation(program, "u_r_scale");
      ctx.uniform1f(location, r);
      location = ctx.getUniformLocation(program, "u_g_scale");
      ctx.uniform1f(location, g);
      location = ctx.getUniformLocation(program, "u_b_scale");
      ctx.uniform1f(location, b);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.setCalibrations = function(r, g, b) {
      var ctx, location;
      ctx = this.ctx;
      ctx.useProgram(this.programs.color);
      location = ctx.getUniformLocation(this.programs.color, 'u_r_calibration');
      ctx.uniform1f(location, r);
      location = ctx.getUniformLocation(this.programs.color, 'u_g_calibration');
      ctx.uniform1f(location, g);
      location = ctx.getUniformLocation(this.programs.color, 'u_b_calibration');
      ctx.uniform1f(location, b);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.setAlpha = function(value) {
      var ctx, location;
      ctx = this.ctx;
      ctx.useProgram(this.programs.color);
      location = ctx.getUniformLocation(this.programs.color, 'u_alpha');
      ctx.uniform1f(location, value);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.setQ = function(value) {
      var ctx, location;
      ctx = this.ctx;
      ctx.useProgram(this.programs.color);
      location = ctx.getUniformLocation(this.programs.color, 'u_Q');
      ctx.uniform1f(location, value);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.draw = function() {
      this._updateUniforms(this.currentProgram);
      return this.ctx.drawArrays(this.ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.drawColor = function(r, g, b) {
      var ctx, location, program;
      ctx = this.ctx;
      program = this.currentProgram = this.programs.color;
      ctx.useProgram(program);
      location = ctx.getUniformLocation(program, "u_tex0");
      ctx.uniform1i(location, this.lookup[r]);
      location = ctx.getUniformLocation(program, "u_tex1");
      ctx.uniform1i(location, this.lookup[g]);
      location = ctx.getUniformLocation(program, "u_tex2");
      ctx.uniform1i(location, this.lookup[b]);
      return this.draw();
    };

    Api.prototype.wheelHandler = function(e) {
      var location;
      Api.__super__.wheelHandler.apply(this, arguments);
      location = this.ctx.getUniformLocation(this.currentProgram, 'u_scale');
      this.ctx.uniform1f(location, this.zoom);
      return this.ctx.drawArrays(this.ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.getXOffset = function() {
      return this.xOffset;
    };

    Api.prototype.getYOffset = function() {
      return this.yOffset;
    };

    Api.prototype.getZoom = function() {
      return this.zoom;
    };

    Api.prototype.teardown = function() {
      var buffer, ctx, key, program, shader, texture, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
      ctx = this.ctx;
      _ref = this.textures;
      for (key in _ref) {
        texture = _ref[key];
        ctx.deleteTexture(texture);
      }
      _ref1 = this.buffers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        buffer = _ref1[_i];
        ctx.deleteBuffer(buffer);
      }
      _ref2 = this.shaders;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        shader = _ref2[_j];
        ctx.deleteShader(shader);
      }
      _ref3 = this.programs;
      for (key in _ref3) {
        program = _ref3[key];
        ctx.deleteProgram(program);
      }
      this.el.removeChild(this.canvas);
      this.ctx = void 0;
      return this._reset();
    };

    return Api;

  })(BaseApi);

  version = this.astro.WebFITS.version;

  this.astro.WebFITS = Api;

  this.astro.WebFITS.version = version;

}).call(this);
