// Generated by CoffeeScript 1.4.0
(function() {
  var Api, BaseApi, ColorMaps, Shaders, WebFITS, version,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (this.astro == null) {
    this.astro = {};
  }

  WebFITS = {};

  WebFITS.version = '0.4.2';

  this.astro.WebFITS = WebFITS;

  BaseApi = (function() {

    function BaseApi(el, dimension) {
      var canvasStyle, overlayStyle, parentStyle;
      this.el = el;
      this.wheelHandler = __bind(this.wheelHandler, this);

      this._reset();
      this.width = this.height = dimension;
      this.canvas = document.createElement('canvas');
      this.canvas.setAttribute('width', this.width);
      this.canvas.setAttribute('height', this.height);
      this.canvas.setAttribute('class', 'visualization');
      this.overlay = document.createElement('canvas');
      this.overlay.setAttribute('width', this.width);
      this.overlay.setAttribute('height', this.height);
      this.overlay.setAttribute('class', 'overlay');
      this.overlayCtx = this.overlay.getContext('2d');
      this.el.appendChild(this.canvas);
      this.el.appendChild(this.overlay);
      this.nImages = 1;
      this.lookup = {};
      if (!this.getContext()) {
        return null;
      }
      this.offsetLeft = this.canvas.offsetLeft;
      this.offsetTop = this.canvas.offsetTop;
      parentStyle = this.canvas.parentElement.style;
      parentStyle.width = "" + this.canvas.width + "px";
      parentStyle.height = "" + this.canvas.height + "px";
      parentStyle.overflow = 'hidden';
      parentStyle.backgroundColor = '#252525';
      parentStyle.position = 'relative';
      canvasStyle = this.canvas.style;
      overlayStyle = this.overlay.style;
      canvasStyle.position = 'absolute';
      overlayStyle.position = 'absolute';
      overlayStyle.pointerEvents = 'none';
      this.xOffset = -this.width / 2;
      this.yOffset = -this.height / 2;
      this.xOldOffset = this.xOffset;
      this.yOldOffset = this.yOffset;
      this.drag = false;
      this.zoom = 2 / this.width;
      this.minZoom = this.zoom / 8;
      this.maxZoom = 20 * this.zoom;
      this.zoomX = this.zoom;
      this.zoomY = this.zoom;
      this.crosshair = false;
    }

    BaseApi.prototype.drawCrosshair = function() {
      this.overlay.width = this.overlay.width;
      this.overlayCtx.lineWidth = 1;
      this.overlayCtx.strokeStyle = '#0071e5';
      this.overlayCtx.moveTo(0, this.yCurrent);
      this.overlayCtx.lineTo(this.width, this.yCurrent);
      this.overlayCtx.moveTo(this.xCurrent, 0);
      this.overlayCtx.lineTo(this.xCurrent, this.height);
      return this.overlayCtx.stroke();
    };

    BaseApi.prototype.setupControls = function(callbacks, opts) {
      var _onmousedown, _onmousemove, _onmouseout, _onmouseover, _onmouseup,
        _this = this;
      if (callbacks == null) {
        callbacks = null;
      }
      if (opts == null) {
        opts = null;
      }
      _onmousedown = function(e) {
        _this.drag = true;
        _this.xOldOffset = _this.xOffset;
        _this.yOldOffset = _this.yOffset;
        _this.xMouseDown = e.clientX;
        return _this.yMouseDown = e.clientY;
      };
      _onmouseup = function(e) {
        var xDelta, yDelta;
        _this.drag = false;
        if (_this.xMouseDown == null) {
          return null;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.width / _this.zoom * 2.0);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.height / _this.zoom * 2.0);
        return _this.draw();
      };
      _onmousemove = function(e) {
        var xDelta, yDelta;
        if (_this.crosshair) {
          _this.xCurrent = e.layerX;
          _this.yCurrent = e.layerY;
          _this.drawCrosshair();
        }
        if (!_this.drag) {
          return;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.width / _this.zoom * 2.0);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.height / _this.zoom * 2.0);
        return _this.draw();
      };
      _onmouseout = function(e) {
        return _this.drag = false;
      };
      _onmouseover = function(e) {
        return _this.drag = false;
      };
      if ((callbacks != null ? callbacks.onzoom : void 0) != null) {
        this.zoomCallback = callbacks.onzoom;
      }
      if ((callbacks != null ? callbacks.onmousedown : void 0) != null) {
        this.canvas.onmousedown = function(e) {
          _onmousedown(e);
          return callbacks.onmousedown.call(_this, opts, e);
        };
      } else {
        this.canvas.onmousedown = function(e) {
          return _onmousedown(e);
        };
      }
      if ((callbacks != null ? callbacks.onmouseup : void 0) != null) {
        this.canvas.onmouseup = function(e) {
          _onmouseup(e);
          return callbacks.onmouseup.call(_this, opts, e);
        };
      } else {
        this.canvas.onmouseup = function(e) {
          return _onmouseup(e);
        };
      }
      if ((callbacks != null ? callbacks.onmousemove : void 0) != null) {
        this.canvas.onmousemove = function(e) {
          var offsetX, offsetY, x, xDelta, y, yDelta;
          _onmousemove(e);
          offsetX = e.clientX - _this.offsetLeft;
          offsetY = e.clientY - _this.offsetTop;
          xDelta = -1 * (_this.width / 2 - offsetX) / _this.width / _this.zoom * 2.0;
          yDelta = (_this.height / 2 - offsetY) / _this.height / _this.zoom * 2.0;
          x = ((-1 * (_this.xOffset + 0.5)) + xDelta) + 1.5 << 0;
          y = ((-1 * (_this.yOffset + 0.5)) + yDelta) + 1.5 << 0;
          return callbacks.onmousemove.call(_this, x, y, opts, e);
        };
      } else {
        this.canvas.onmousemove = function(e) {
          return _onmousemove(e);
        };
      }
      if ((callbacks != null ? callbacks.onmouseout : void 0) != null) {
        this.canvas.onmouseout = function(e) {
          _onmouseout(e);
          return callbacks.onmouseout.call(_this, opts, e);
        };
      } else {
        this.canvas.onmouseout = function(e) {
          return _onmouseout(e);
        };
      }
      if ((callbacks != null ? callbacks.onmouseover : void 0) != null) {
        this.canvas.onmouseover = function(e) {
          _onmouseover(e);
          return callbacks.onmouseover.call(_this, opts, e);
        };
      } else {
        this.canvas.onmouseover = function(e) {
          return _onmouseover(e);
        };
      }
      this.canvas.addEventListener('mousewheel', this.wheelHandler, false);
      return this.canvas.addEventListener('wheel', this.wheelHandler, false);
    };

    BaseApi.prototype.wheelHandler = function(e) {
      var factor;
      e.preventDefault();
      factor = e.shiftKey ? 1.01 : 1.1;
      this.zoom *= (e.wheelDelta || e.deltaY) < 0 ? 1 / factor : factor;
      this.zoom = this.zoom > this.maxZoom ? this.maxZoom : this.zoom;
      this.zoom = this.zoom < this.minZoom ? this.minZoom : this.zoom;
      return typeof this.zoomCallback === "function" ? this.zoomCallback() : void 0;
    };

    BaseApi.prototype.setCursor = function(type) {
      this.overlay.width = this.overlay.width;
      if (type === 'crosshair') {
        return this.crosshair = true;
      } else {
        return this.crosshair = false;
      }
    };

    return BaseApi;

  })();

  this.astro.WebFITS.BaseApi = BaseApi;

  Shaders = {
    vertex: ["attribute vec2 a_position;", "attribute vec2 a_textureCoord;", "uniform vec2 u_offset;", "uniform float u_scale;", "varying vec2 v_textureCoord;", "void main() {", "vec2 position = a_position + u_offset;", "position = position * u_scale;", "gl_Position = vec4(position, 0.0, 1.0);", "v_textureCoord = a_textureCoord;", "}"].join("\n"),
    linear: ["precision mediump float;", "uniform sampler2D u_tex;", "uniform sampler2D uColorMap;", "uniform float uColorMapIndex;", "uniform vec2 u_extent;", "varying vec2 v_textureCoord;", "void main() {", "vec4 pixel_v = texture2D(u_tex, v_textureCoord);", "float min = u_extent[0];", "float max = u_extent[1];", "float x = (pixel_v.r - min) / (max - min);", "gl_FragColor = texture2D( uColorMap, vec2(x, uColorMapIndex / 70.0) );", "}"].join("\n"),
    logarithm: ["precision mediump float;", "uniform sampler2D u_tex;", "uniform sampler2D uColorMap;", "uniform float uColorMapIndex;", "uniform vec2 u_extent;", "varying vec2 v_textureCoord;", "float logarithm(float value) {", "return log(value / 0.05 + 1.0) / log(1.0 / 0.05 + 1.0);", "}", "void main() {", "vec4 pixel_v = texture2D(u_tex, v_textureCoord);", "float min = u_extent[0];", "float max = logarithm(u_extent[1] - min);", "float logMin = logarithm(0.0);", "float pixel = logarithm(pixel_v[0] - min);", "float x = (pixel - logMin) / (max - logMin);", "gl_FragColor = texture2D( uColorMap, vec2(x, uColorMapIndex / 70.0) );", "}"].join("\n"),
    sqrt: ["precision mediump float;", "uniform sampler2D u_tex;", "uniform sampler2D uColorMap;", "uniform float uColorMapIndex;", "uniform vec2 u_extent;", "varying vec2 v_textureCoord;", "void main() {", "vec4 pixel_v = texture2D(u_tex, v_textureCoord);", "float min = u_extent[0];", "float max = u_extent[1] - min;", "float x = sqrt( (pixel_v[0] - min) / max);", "gl_FragColor = texture2D( uColorMap, vec2(x, uColorMapIndex / 70.0) );", "}"].join("\n"),
    arcsinh: ["precision mediump float;", "uniform sampler2D u_tex;", "uniform sampler2D uColorMap;", "uniform float uColorMapIndex;", "uniform vec2 u_extent;", "varying vec2 v_textureCoord;", "float arcsinh(float value) {", "return log(value + sqrt(1.0 + value * value));", "}", "void main() {", "vec4 pixel_v = texture2D(u_tex, v_textureCoord);", "float min = 0.0;", "float max = arcsinh( u_extent[1] - u_extent[0] );", "float x = arcsinh( pixel_v[0] - u_extent[0] ) / max;", "gl_FragColor = texture2D( uColorMap, vec2(x, uColorMapIndex / 70.0) );", "}"].join("\n"),
    power: ["precision mediump float;", "uniform sampler2D u_tex;", "uniform sampler2D uColorMap;", "uniform float uColorMapIndex;", "uniform vec2 u_extent;", "varying vec2 v_textureCoord;", "void main() {", "vec4 pixel_v = texture2D(u_tex, v_textureCoord);", "float min = u_extent[0];", "float max = pow(u_extent[1] - min, 2.0);", "float pixel = pow(pixel_v[0] - min, 2.0);", "float x = pixel / max;", "gl_FragColor = texture2D( uColorMap, vec2(x, uColorMapIndex / 70.0) );", "}"].join("\n"),
    color: ["precision mediump float;", "uniform sampler2D u_tex0;", "uniform sampler2D u_tex1;", "uniform sampler2D u_tex2;", "uniform float u_r_scale;", "uniform float u_g_scale;", "uniform float u_b_scale;", "uniform float u_r_calibration;", "uniform float u_g_calibration;", "uniform float u_b_calibration;", "uniform float u_alpha;", "uniform float u_Q;", "varying vec2 v_textureCoord;", "float arcsinh(float value) {", "return log(value + sqrt(1.0 + value * value));", "}", "void main() {", "vec4 pixel_v_r = texture2D(u_tex0, v_textureCoord);", "vec4 pixel_v_g = texture2D(u_tex1, v_textureCoord);", "vec4 pixel_v_b = texture2D(u_tex2, v_textureCoord);", "float r = (pixel_v_r[0]) * u_r_calibration * u_r_scale;", "float g = (pixel_v_g[0]) * u_g_calibration * u_g_scale;", "float b = (pixel_v_b[0]) * u_b_calibration * u_b_scale;", "float I = r + g + b + 1e-10;", "float factor = arcsinh(u_alpha * u_Q * I) / (u_Q * I);", "float R = clamp(r * factor, 0.0, 1.0);", "float G = clamp(g * factor, 0.0, 1.0);", "float B = clamp(b * factor, 0.0, 1.0);", "gl_FragColor = vec4(R, G, B, 1.0);", "}"].join("\n")
  };

  this.astro.WebFITS.Shaders = Shaders;

  ColorMaps = {
    base64: "",
    Accent: 70,
    Blues: 69,
    BrBG: 68,
    BuGn: 67,
    BuPu: 66,
    CMRmap: 65,
    Dark2: 64,
    GnBu: 63,
    Greens: 62,
    Greys: 61,
    OrRd: 60,
    Oranges: 59,
    PRGn: 58,
    Paired: 57,
    Pastel1: 56,
    Pastel2: 55,
    PiYG: 54,
    PuBuGn: 53,
    PuBu: 52,
    PuOr: 51,
    PuRd: 50,
    Purples: 49,
    RdBu: 48,
    RdGy: 47,
    RdPu: 46,
    RdYlBu: 45,
    RdYlGn: 44,
    Reds: 43,
    Set1: 42,
    Set2: 41,
    Set3: 40,
    Spectral: 39,
    YlGnBu: 38,
    YlGn: 37,
    YlOrBr: 36,
    YlOrRd: 35,
    afmhot: 34,
    autumn: 33,
    binary: 32,
    bone: 31,
    brg: 30,
    bwr: 29,
    cool: 28,
    coolwarm: 27,
    copper: 26,
    cubehelix: 25,
    flag: 24,
    gist_earth: 23,
    gist_gray: 22,
    gist_heat: 21,
    gist_ncar: 20,
    gistainbow: 19,
    gist_stern: 18,
    gist_yarg: 17,
    gnuplot2: 16,
    gnuplot: 15,
    gray: 14,
    hot: 13,
    hsv: 12,
    jet: 11,
    ocean: 10,
    pink: 9,
    prism: 8,
    rainbow: 7,
    seismic: 6,
    spectral: 5,
    spring: 4,
    summer: 3,
    terrain: 2,
    winter: 1
  };

  this.astro.WebFITS.ColorMaps = ColorMaps;

  BaseApi = this.astro.WebFITS.BaseApi;

  Shaders = this.astro.WebFITS.Shaders;

  ColorMaps = this.astro.WebFITS.ColorMaps;

  Api = (function(_super) {

    __extends(Api, _super);

    function Api() {
      return Api.__super__.constructor.apply(this, arguments);
    }

    Api.prototype.fShaders = ['linear', 'logarithm', 'sqrt', 'arcsinh', 'power', 'color'];

    Api.prototype.grayMap = 32;

    Api.prototype._reset = function() {
      this.programs = {};
      this.textures = {};
      this.buffers = [];
      return this.shaders = [];
    };

    Api.prototype._getExtension = function() {
      return this.ctx.getExtension('OES_texture_float');
    };

    Api.prototype._loadShader = function(source, type) {
      var compiled, ctx, lastError, shader;
      ctx = this.ctx;
      shader = ctx.createShader(type);
      ctx.shaderSource(shader, source);
      ctx.compileShader(shader);
      compiled = ctx.getShaderParameter(shader, ctx.COMPILE_STATUS);
      if (!compiled) {
        lastError = ctx.getShaderInfoLog(shader);
        throw "Error compiling shader " + shader + ": " + lastError;
        ctx.deleteShader(shader);
        return null;
      }
      this.shaders.push(shader);
      return shader;
    };

    Api.prototype._createProgram = function(vshader, fshader) {
      var ctx, linked, program;
      ctx = this.ctx;
      program = ctx.createProgram();
      ctx.attachShader(program, vshader);
      ctx.attachShader(program, fshader);
      ctx.linkProgram(program);
      linked = ctx.getProgramParameter(program, ctx.LINK_STATUS);
      if (!linked) {
        throw "Error in program linking: " + (ctx.getProgramInfoLog(program));
        ctx.deleteProgram(program);
        return null;
      }
      return program;
    };

    Api.prototype._setRectangle = function(ctx, width, height) {
      var x1, x2, y1, y2, _ref, _ref1;
      _ref = [0, 0 + width], x1 = _ref[0], x2 = _ref[1];
      _ref1 = [0, 0 + height], y1 = _ref1[0], y2 = _ref1[1];
      return ctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]), ctx.STATIC_DRAW);
    };

    Api.prototype._updateUniforms = function(program) {
      var offsetLocation, scaleLocation;
      offsetLocation = this.ctx.getUniformLocation(program, 'u_offset');
      scaleLocation = this.ctx.getUniformLocation(program, 'u_scale');
      this.ctx.uniform2f(offsetLocation, this.xOffset, this.yOffset);
      return this.ctx.uniform1f(scaleLocation, this.zoom);
    };

    Api.prototype.getContext = function() {
      var buffer, colorIndexLocation, ctx, ext, fragShader, height, index, key, name, offsetLocation, positionLocation, program, scaleLocation, texCoordBuffer, texCoordLocation, vertexShader, width, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      _ref = ['webgl', 'experimental-webgl'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        try {
          ctx = this.canvas.getContext(name);
          width = this.canvas.width;
          height = this.canvas.height;
          ctx.viewport(0, 0, width, height);
        } catch (e) {

        }
        if (ctx) {
          break;
        }
      }
      if (!ctx) {
        return null;
      }
      this.ctx = ctx;
      ext = this._getExtension();
      if (!ext) {
        return null;
      }
      vertexShader = this._loadShader(Shaders.vertex, ctx.VERTEX_SHADER);
      if (!vertexShader) {
        return null;
      }
      _ref1 = this.fShaders;
      for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
        key = _ref1[index];
        fragShader = this._loadShader(Shaders[key], ctx.FRAGMENT_SHADER);
        if (!fragShader) {
          return null;
        }
        this.programs[key] = this._createProgram(vertexShader, fragShader);
        if (!this.programs[key]) {
          return null;
        }
      }
      _ref2 = this.programs;
      for (key in _ref2) {
        program = _ref2[key];
        ctx.useProgram(program);
        positionLocation = ctx.getAttribLocation(program, 'a_position');
        texCoordLocation = ctx.getAttribLocation(program, 'a_textureCoord');
        offsetLocation = ctx.getUniformLocation(program, 'u_offset');
        scaleLocation = ctx.getUniformLocation(program, 'u_scale');
        colorIndexLocation = ctx.getUniformLocation(program, 'uColorMapIndex');
        ctx.uniform2f(offsetLocation, -width / 2, -height / 2);
        ctx.uniform1f(scaleLocation, 2 / width);
        ctx.uniform1f(colorIndexLocation, ColorMaps.binary);
      }
      this.currentProgram = this.programs.linear;
      texCoordBuffer = ctx.createBuffer();
      ctx.bindBuffer(ctx.ARRAY_BUFFER, texCoordBuffer);
      ctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), ctx.STATIC_DRAW);
      ctx.enableVertexAttribArray(texCoordLocation);
      ctx.vertexAttribPointer(texCoordLocation, 2, ctx.FLOAT, false, 0, 0);
      buffer = ctx.createBuffer();
      ctx.bindBuffer(ctx.ARRAY_BUFFER, buffer);
      ctx.enableVertexAttribArray(positionLocation);
      ctx.vertexAttribPointer(positionLocation, 2, ctx.FLOAT, false, 0, 0);
      this.buffers.push(texCoordBuffer);
      this.buffers.push(buffer);
      this.setupColorMapTexture();
      return ctx;
    };

    Api.prototype.setupColorMapTexture = function() {
      var ctx, img,
        _this = this;
      ctx = this.ctx;
      this._setRectangle(ctx, 256, 70);
      img = new Image();
      img.onload = function(e) {
        var location, program, stretch, texture, _i, _len, _ref;
        ctx.activeTexture(ctx.TEXTURE0);
        texture = ctx.createTexture();
        ctx.bindTexture(ctx.TEXTURE_2D, texture);
        ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_S, ctx.CLAMP_TO_EDGE);
        ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_T, ctx.CLAMP_TO_EDGE);
        ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx.NEAREST);
        ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx.NEAREST);
        ctx.texImage2D(ctx.TEXTURE_2D, 0, ctx.RGB, ctx.RGB, ctx.UNSIGNED_BYTE, img);
        _ref = ['linear', 'logarithm', 'sqrt', 'arcsinh', 'power'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          stretch = _ref[_i];
          program = _this.programs[stretch];
          ctx.useProgram(program);
          location = ctx.getUniformLocation(program, 'uColorMap');
          ctx.uniform1i(location, 0);
        }
        ctx.useProgram(_this.currentProgram);
        return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
      };
      return img.src = "data:image/png;base64," + ColorMaps.base64;
    };

    Api.prototype.setColorMap = function(name) {
      var cmaps, ctx, location, program, stretch, _i, _len, _ref;
      ctx = this.ctx;
      cmaps = Object.keys(ColorMaps);
      cmaps.shift();
      name = cmaps.indexOf(name) > -1 ? name : 'binary';
      _ref = ['linear', 'logarithm', 'sqrt', 'arcsinh', 'power'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        stretch = _ref[_i];
        program = this.programs[stretch];
        ctx.useProgram(program);
        location = ctx.getUniformLocation(program, 'uColorMapIndex');
        ctx.uniform1f(location, ColorMaps[name]);
      }
      ctx.useProgram(this.currentProgram);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.loadImage = function(identifier, arr, width, height) {
      var ctx, index, texture;
      ctx = this.ctx;
      if (identifier in this.lookup) {
        index = this.lookup[identifier];
        ctx.activeTexture(ctx.TEXTURE0 + index);
        ctx.texImage2D(ctx.TEXTURE_2D, 0, ctx.LUMINANCE, width, height, 0, ctx.LUMINANCE, ctx.FLOAT, new Float32Array(arr));
        return;
      }
      this._setRectangle(ctx, width, height);
      index = this.nImages;
      this.lookup[identifier] = this.nImages;
      ctx.activeTexture(ctx.TEXTURE0 + this.nImages);
      texture = ctx.createTexture();
      ctx.bindTexture(ctx.TEXTURE_2D, texture);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_S, ctx.CLAMP_TO_EDGE);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_T, ctx.CLAMP_TO_EDGE);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx.NEAREST);
      ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx.NEAREST);
      ctx.texImage2D(ctx.TEXTURE_2D, 0, ctx.LUMINANCE, width, height, 0, ctx.LUMINANCE, ctx.FLOAT, new Float32Array(arr));
      if (this.currentImage == null) {
        this.currentImage = identifier;
      }
      this.textures[identifier] = texture;
      return this.nImages += 1;
    };

    Api.prototype.setImage = function(identifier) {
      var index, location;
      index = this.lookup[identifier];
      this.ctx.activeTexture(this.ctx.TEXTURE0 + index);
      location = this.ctx.getUniformLocation(this.currentProgram, "u_tex");
      this.ctx.uniform1i(location, index);
      return this.currentImage = identifier;
    };

    Api.prototype.setStretch = function(stretch) {
      this.currentProgram = this.programs[stretch];
      this.ctx.useProgram(this.currentProgram);
      this.setImage(this.currentImage);
      return this.draw();
    };

    Api.prototype.setExtent = function(min, max) {
      var ctx, location, program, stretch, _i, _len, _ref;
      ctx = this.ctx;
      _ref = ['linear', 'logarithm', 'sqrt', 'arcsinh', 'power'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        stretch = _ref[_i];
        program = this.programs[stretch];
        ctx.useProgram(program);
        location = ctx.getUniformLocation(program, 'u_extent');
        ctx.uniform2f(location, min, max);
      }
      ctx.useProgram(this.currentProgram);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.setScales = function(r, g, b) {
      var ctx, location, program;
      ctx = this.ctx;
      program = this.programs.color;
      ctx.useProgram(program);
      location = ctx.getUniformLocation(program, "u_r_scale");
      ctx.uniform1f(location, r);
      location = ctx.getUniformLocation(program, "u_g_scale");
      ctx.uniform1f(location, g);
      location = ctx.getUniformLocation(program, "u_b_scale");
      ctx.uniform1f(location, b);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.setCalibrations = function(r, g, b) {
      var ctx, location;
      ctx = this.ctx;
      ctx.useProgram(this.programs.color);
      location = ctx.getUniformLocation(this.programs.color, 'u_r_calibration');
      ctx.uniform1f(location, r);
      location = ctx.getUniformLocation(this.programs.color, 'u_g_calibration');
      ctx.uniform1f(location, g);
      location = ctx.getUniformLocation(this.programs.color, 'u_b_calibration');
      ctx.uniform1f(location, b);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.setAlpha = function(value) {
      var ctx, location;
      ctx = this.ctx;
      ctx.useProgram(this.programs.color);
      location = ctx.getUniformLocation(this.programs.color, 'u_alpha');
      ctx.uniform1f(location, value);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.setQ = function(value) {
      var ctx, location;
      ctx = this.ctx;
      ctx.useProgram(this.programs.color);
      location = ctx.getUniformLocation(this.programs.color, 'u_Q');
      ctx.uniform1f(location, value);
      return ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.draw = function() {
      this._updateUniforms(this.currentProgram);
      return this.ctx.drawArrays(this.ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.drawColor = function(r, g, b) {
      var ctx, location, program;
      ctx = this.ctx;
      ctx.clear(ctx.COLOR_BUFFER_BIT);
      program = this.currentProgram = this.programs.color;
      ctx.useProgram(program);
      location = ctx.getUniformLocation(program, "u_tex0");
      ctx.uniform1i(location, this.lookup[r]);
      location = ctx.getUniformLocation(program, "u_tex1");
      ctx.uniform1i(location, this.lookup[g]);
      location = ctx.getUniformLocation(program, "u_tex2");
      ctx.uniform1i(location, this.lookup[b]);
      return this.draw();
    };

    Api.prototype.wheelHandler = function(e) {
      var location;
      Api.__super__.wheelHandler.apply(this, arguments);
      location = this.ctx.getUniformLocation(this.currentProgram, 'u_scale');
      this.ctx.uniform1f(location, this.zoom);
      return this.ctx.drawArrays(this.ctx.TRIANGLES, 0, 6);
    };

    Api.prototype.getXOffset = function() {
      return this.xOffset;
    };

    Api.prototype.getYOffset = function() {
      return this.yOffset;
    };

    Api.prototype.getZoom = function() {
      return this.zoom;
    };

    Api.prototype.teardown = function() {
      var buffer, ctx, key, program, shader, texture, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
      ctx = this.ctx;
      _ref = this.textures;
      for (key in _ref) {
        texture = _ref[key];
        ctx.deleteTexture(texture);
      }
      _ref1 = this.buffers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        buffer = _ref1[_i];
        ctx.deleteBuffer(buffer);
      }
      _ref2 = this.shaders;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        shader = _ref2[_j];
        ctx.deleteShader(shader);
      }
      _ref3 = this.programs;
      for (key in _ref3) {
        program = _ref3[key];
        ctx.deleteProgram(program);
      }
      this.el.removeChild(this.canvas);
      this.ctx = void 0;
      return this._reset();
    };

    return Api;

  })(BaseApi);

  version = this.astro.WebFITS.version;

  this.astro.WebFITS = Api;

  this.astro.WebFITS.version = version;

}).call(this);
