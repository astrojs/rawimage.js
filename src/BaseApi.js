// Generated by CoffeeScript 1.6.3
(function() {
  var BaseApi,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BaseApi = (function() {
    function BaseApi(el, dimension) {
      var canvasStyle, overlayStyle, parentStyle;
      this.el = el;
      this.wheelHandler = __bind(this.wheelHandler, this);
      this._reset();
      this.width = this.height = dimension;
      
      this.canvas = document.createElement('canvas');
      this.canvas.setAttribute('width', this.width);
      this.canvas.setAttribute('height', this.height);
      this.canvas.setAttribute('class', 'visualization');
      this.overlay = document.createElement('canvas');
      this.overlay.setAttribute('width', this.width);
      this.overlay.setAttribute('height', this.height);
      this.overlay.setAttribute('class', 'overlay');
      this.overlayCtx = this.overlay.getContext('2d');
      this.el.appendChild(this.canvas);
      this.el.appendChild(this.overlay);
      
      this.nImages = 1;
      this.lookup = {};
      if (!this.getContext()) {
        return null;
      }
      this.offsetLeft = this.canvas.offsetLeft;
      this.offsetTop = this.canvas.offsetTop;
      parentStyle = this.canvas.parentElement.style;
      parentStyle.width = "" + this.canvas.width + "px";
      parentStyle.height = "" + this.canvas.height + "px";
      parentStyle.overflow = 'hidden';
      parentStyle.backgroundColor = '#252525';
      parentStyle.position = 'relative';
      canvasStyle = this.canvas.style;
      overlayStyle = this.overlay.style;
      canvasStyle.position = 'absolute';
      overlayStyle.position = 'absolute';
      overlayStyle.pointerEvents = 'none';
      this.xOffset = -this.width / 2;
      this.yOffset = -this.height / 2;
      this.xOldOffset = this.xOffset;
      this.yOldOffset = this.yOffset;
      this.drag = false;
      this.zoom = 2 / this.width;
      this.minZoom = this.zoom / 8;
      this.maxZoom = 20 * this.zoom;
      this.zoomX = this.zoom;
      this.zoomY = this.zoom;
      this.crosshair = false;
    }

    BaseApi.prototype.drawCrosshair = function() {
      // Reset the width to clear the canvas
      this.overlay.width = this.overlay.width;
      
      this.overlayCtx.lineWidth = 1;
      this.overlayCtx.strokeStyle = '#0071e5';
      
      this.overlayCtx.moveTo(0, this.yCurrent);
      this.overlayCtx.lineTo(this.width, this.yCurrent);
      this.overlayCtx.moveTo(this.xCurrent, 0);
      this.overlayCtx.lineTo(this.xCurrent, this.height);
      
      this.overlayCtx.stroke();
    };

    BaseApi.prototype.setupControls = function(callbacks, opts) {
      var _onmousedown, _onmousemove, _onmouseout, _onmouseover, _onmouseup,
        _this = this;
      if (callbacks == null) {
        callbacks = null;
      }
      if (opts == null) {
        opts = null;
      }
      
      // Create default zoom callback to avoid an existance check in a hot function
      
      this.zoomCallback = function() { void 0; };
      
      _onmousedown = function(e) {
        _this.drag = true;
        _this.xOldOffset = _this.xOffset;
        _this.yOldOffset = _this.yOffset;
        _this.xMouseDown = e.clientX;
        return _this.yMouseDown = e.clientY;
      };
      _onmouseup = function(e) {
        var xDelta, yDelta;
        _this.drag = false;
        if (_this.xMouseDown == null) {
          return null;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.width / _this.zoom * 2.0);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.height / _this.zoom * 2.0);
        return _this.draw();
      };
      _onmousemove = function(e) {
        var xDelta, yDelta;
        if (_this.crosshair) {
          _this.xCurrent = e.layerX;
          _this.yCurrent = e.layerY;
          _this.drawCrosshair();
        }
        if (!_this.drag) {
          return;
        }
        xDelta = e.clientX - _this.xMouseDown;
        yDelta = e.clientY - _this.yMouseDown;
        _this.xOffset = _this.xOldOffset + (xDelta / _this.width / _this.zoom * 2.0);
        _this.yOffset = _this.yOldOffset - (yDelta / _this.height / _this.zoom * 2.0);
        return _this.draw();
      };
      _onmouseout = function(e) {
        return _this.drag = false;
      };
      _onmouseover = function(e) {
        return _this.drag = false;
      };
      if ((callbacks != null ? callbacks.onzoom : void 0) != null) {
        this.zoomCallback = callbacks.onzoom;
      }
      if ((callbacks != null ? callbacks.onmousedown : void 0) != null) {
        this.canvas.onmousedown = function(e) {
          _onmousedown(e);
          return callbacks.onmousedown.call(_this, opts, e);
        };
      } else {
        this.canvas.onmousedown = function(e) {
          return _onmousedown(e);
        };
      }
      if ((callbacks != null ? callbacks.onmouseup : void 0) != null) {
        this.canvas.onmouseup = function(e) {
          _onmouseup(e);
          return callbacks.onmouseup.call(_this, opts, e);
        };
      } else {
        this.canvas.onmouseup = function(e) {
          return _onmouseup(e);
        };
      }
      if ((callbacks != null ? callbacks.onmousemove : void 0) != null) {
        this.canvas.onmousemove = function(e) {
          var offsetX, offsetY, x, xDelta, y, yDelta;
          _onmousemove(e);
          offsetX = e.clientX - _this.offsetLeft;
          offsetY = e.clientY - _this.offsetTop;
          xDelta = -1 * (_this.width / 2 - offsetX) / _this.width / _this.zoom * 2.0;
          yDelta = (_this.height / 2 - offsetY) / _this.height / _this.zoom * 2.0;
          x = ((-1 * (_this.xOffset + 0.5)) + xDelta) + 1.5 << 0;
          y = ((-1 * (_this.yOffset + 0.5)) + yDelta) + 1.5 << 0;
          return callbacks.onmousemove.call(_this, x, y, opts, e);
        };
      } else {
        this.canvas.onmousemove = function(e) {
          return _onmousemove(e);
        };
      }
      
      this.canvas.addEventListener('mousewheel', this.wheelHandler, false);
      this.canvas.addEventListener('wheel', this.wheelHandler, false);
    };

    BaseApi.prototype.wheelHandler = function(e) {
      var factor;
      
      e.preventDefault();
      factor = e.shiftKey ? 1.01 : 1.1;
      
      this.zoom *= (e.wheelDelta || e.deltaY) < 0 ? 1 / factor : factor;
      this.zoom = this.zoom > this.maxZoom ? this.maxZoom : this.zoom;
      this.zoom = this.zoom < this.minZoom ? this.minZoom : this.zoom;
      
      this.zoomCallback();
    };
    
    // Toggle a cursor over the image.
    // TODO: This check might be avoidable by redefining a cursor function
    BaseApi.prototype.setCursor = function(type) {
      this.overlay.width = this.overlay.width;
      if (type === 'crosshair') {
        return this.crosshair = true;
      } else {
        return this.crosshair = false;
      }
    };

    return BaseApi;

  })();

  this.astro.WebFITS.BaseApi = BaseApi;

}).call(this);
